(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (do (pr (error-to-string E) (stoutput)) (nl 0)))) (shen.loop)))))

(defun shen.credits () (do (pr "
Shen, www.shenlanguage.org, copyright (C) 2010-2021, Mark Tarver
" (stoutput)) (do (pr (cn "version: S" (shen.app (value *version*) (cn ", language: " (shen.app (value *language*) (cn ", platform: " (shen.app (value *implementation*) (cn " " (shen.app (value *release*) "
" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (pr (cn "port " (shen.app (value *port*) (cn ", ported by " (shen.app (value *porters*) "

" shen.a)) shen.a)) (stoutput)))))

(defun shen.initialise_environment () (do (set shen.*call* 0) (set shen.*infs* 0)))

(defun shen.prompt () (if (value shen.*tc*) (pr (cn "
(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (pr (cn "
(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.read-evaluate-print () (let Package (value shen.*package*) (let Lineread (shen.package-user-input Package (lineread (stinput))) (let History (shen.update-history) (shen.evaluate-lineread Lineread History (value shen.*tc*))))))

(defun shen.package-user-input (V4475 V4476) (cond ((= null V4475) V4476) (true (let Str (str V4475) (let External (external V4475) (map (lambda X (shen.pui-h Str External X)) V4476))))))

(defun shen.pui-h (V4481 V4482 V4483) (cond ((and (cons? V4483) (and (= fn (hd V4483)) (and (cons? (tl V4483)) (= () (tl (tl V4483)))))) (if (shen.internal? (hd (tl V4483)) V4481 V4482) (cons fn (cons (shen.intern-in-package V4481 (hd (tl V4483))) ())) V4483)) ((cons? V4483) (if (shen.internal? (hd V4483) V4481 V4482) (cons (shen.intern-in-package V4481 (hd V4483)) (map (lambda Y (shen.pui-h V4481 V4482 Y)) (tl V4483))) (if (cons? (hd V4483)) (map (lambda Y (shen.pui-h V4481 V4482 Y)) V4483) (cons (hd V4483) (map (lambda Y (shen.pui-h V4481 V4482 Y)) (tl V4483)))))) (true V4483)))

(defun shen.update-history () (set shen.*history* (cons (it) (value shen.*history*))))

(defun shen.evaluate-lineread (V4494 V4495 V4496) (cond ((and (cons? V4494) (and (= () (tl V4494)) (and (cons? V4495) (and (= "!!" (hd V4495)) (cons? (tl V4495)))))) (let Y (read-from-string (hd (tl V4495))) (let NewHistory (set shen.*history* (cons (hd (tl V4495)) (tl V4495))) (let Print (pr (shen.app (hd (tl V4495)) "
" shen.a) (stoutput)) (shen.evaluate-lineread Y NewHistory V4496))))) ((and (cons? V4494) (and (= () (tl V4494)) (and (cons? V4495) (and (shen.+string? (hd V4495)) (= "%" (hdstr (hd V4495))))))) (let Read (hd (read-from-string (tlstr (hd V4495)))) (let Peek (shen.peek-history Read (tlstr (hd V4495)) (tl V4495)) (let NewHistory (set shen.*history* (tl V4495)) (abort))))) ((and (cons? V4494) (and (= () (tl V4494)) (and (cons? V4495) (and (shen.+string? (hd V4495)) (= "!" (hdstr (hd V4495))))))) (let Read (hd (read-from-string (tlstr (hd V4495)))) (let Match (shen.use-history Read (tlstr (hd V4495)) (tl V4495)) (let Print (pr (shen.app Match "
" shen.a) (stoutput)) (let Y (read-from-string Match) (let NewHistory (set shen.*history* (cons Match (tl V4495))) (shen.evaluate-lineread Y NewHistory V4496))))))) ((and (cons? V4494) (and (= () (tl V4494)) (and (cons? V4495) (and (shen.+string? (hd V4495)) (= "%" (hdstr (hd V4495))))))) (let Read (hd (read-from-string (tlstr (hd V4495)))) (let Peek (shen.peek-history Read (tlstr (hd V4495)) (tl V4495)) (let NewHistory (set shen.*history* (tl V4495)) (abort))))) ((= true V4496) (shen.check-eval-and-print V4494)) ((= false V4496) (shen.eval-and-print V4494)) (true (simple-error "implementation error in shen.evaluate-lineread"))))

(defun shen.use-history (V4497 V4498 V4499) (if (integer? V4497) (nth (+ 1 V4497) (reverse V4499)) (if (symbol? V4497) (shen.string-match V4498 V4499) (simple-error "! expects a number or a symbol
"))))

(defun shen.peek-history (V4500 V4501 V4502) (if (integer? V4500) (pr (cn "
" (shen.app (nth (+ 1 V4500) (reverse V4502)) "" shen.a)) (stoutput)) (if (or (= V4501 "") (symbol? V4500)) (shen.recursive-string-match 0 V4501 (reverse V4502)) (simple-error "% expects a number or a symbol
"))))

(defun shen.string-match (V4512 V4513) (cond ((= () V4513) (simple-error "
input not found")) ((and (cons? V4513) (shen.string-prefix? V4512 (hd V4513))) (hd V4513)) ((cons? V4513) (shen.string-match V4512 (tl V4513))) (true (simple-error "implementation error in shen.string-match"))))

(defun shen.string-prefix? (V4521 V4522) (cond ((= "" V4521) true) ((and (shen.+string? V4521) (shen.whitespace? (string->n (hdstr V4521)))) (shen.string-prefix? (tlstr V4521) V4522)) ((and (shen.+string? V4522) (shen.whitespace? (string->n (hdstr V4522)))) (shen.string-prefix? V4521 (tlstr V4522))) ((and (shen.+string? V4522) (= "(" (hdstr V4522))) (shen.string-prefix? V4521 (tlstr V4522))) ((and (shen.+string? V4521) (and (shen.+string? V4522) (= (hdstr V4521) (hdstr V4522)))) (shen.string-prefix? (tlstr V4521) (tlstr V4522))) (true false)))

(defun shen.recursive-string-match (V4533 V4534 V4535) (cond ((= () V4535) shen.skip) ((cons? V4535) (do (if (shen.string-prefix? V4534 (hd V4535)) (pr (shen.app V4533 (cn ". " (shen.app (hd V4535) "
" shen.a)) shen.a) (stoutput)) shen.skip) (shen.recursive-string-match (+ V4533 1) V4534 (tl V4535)))) (true (simple-error "implementation error in shen.recursive-string-match"))))
