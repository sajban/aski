(defun macroexpand (V1788) (let Fs (map (lambda X (tl X)) (value *macros*)) (shen.macroexpand-h V1788 Fs Fs)))

(defun shen.macroexpand-h (V1797 V1798 V1799) (cond ((= () V1798) V1797) ((cons? V1798) (let Y (shen.walk (hd V1798) V1797) (if (= V1797 Y) (shen.macroexpand-h V1797 (tl V1798) V1799) (shen.macroexpand-h Y V1799 V1799)))) (true (simple-error "implementation error in shen.macroexpand-h"))))

(defun shen.walk (V1800 V1801) (cond ((cons? V1801) (V1800 (map (lambda Z (shen.walk V1800 Z)) V1801))) (true (V1800 V1801))))

(defun shen.defmacro-macro (V1802) (cond ((and (cons? V1802) (and (= defmacro (hd V1802)) (cons? (tl V1802)))) (let Default (cons (protect X) (cons -> (cons (protect X) ()))) (let Def (eval (cons define (cons (hd (tl V1802)) (append (tl (tl V1802)) Default)))) (let Record (shen.record-macro (hd (tl V1802)) (lambda X ((hd (tl V1802)) X))) (hd (tl V1802)))))) (true V1802)))

(defun shen.u!-macro (V1803) (cond ((and (cons? V1803) (and (= u! (hd V1803)) (and (cons? (tl V1803)) (= () (tl (tl V1803)))))) (cons protect (cons (shen.make-uppercase (hd (tl V1803))) ()))) (true V1803)))

(defun shen.make-uppercase (V1804) (intern (shen.mu-h (str V1804))))

(defun shen.mu-h (V1805) (cond ((= "" V1805) "") ((shen.+string? V1805) (let ASCII (string->n (hdstr V1805)) (let ASCII-32 (- ASCII 32) (let Upper (if (and (>= ASCII 97) (<= ASCII 122)) (n->string ASCII-32) (hdstr V1805)) (@s Upper (shen.mu-h (tlstr V1805))))))) (true (shen.f-error shen.mu-h))))

(defun shen.record-macro (V1806 V1807) (set *macros* (shen.update-assoc V1806 V1807 (value *macros*))))

(defun shen.update-assoc (V1817 V1818 V1819) (cond ((= () V1819) (cons (cons V1817 V1818) ())) ((and (cons? V1819) (and (cons? (hd V1819)) (= V1817 (hd (hd V1819))))) (cons (cons (hd (hd V1819)) V1818) (tl V1819))) ((cons? V1819) (cons (hd V1819) (shen.update-assoc V1817 V1818 (tl V1819)))) (true (simple-error "implementation error in shen.update-assoc"))))

(defun shen.error-macro (V1820) (cond ((and (cons? V1820) (and (= error (hd V1820)) (cons? (tl V1820)))) (cons simple-error (cons (shen.mkstr (hd (tl V1820)) (tl (tl V1820))) ()))) (true V1820)))

(defun shen.output-macro (V1821) (cond ((and (cons? V1821) (and (= output (hd V1821)) (cons? (tl V1821)))) (cons pr (cons (shen.mkstr (hd (tl V1821)) (tl (tl V1821))) (cons (cons stoutput ()) ())))) ((and (cons? V1821) (and (= pr (hd V1821)) (and (cons? (tl V1821)) (= () (tl (tl V1821)))))) (cons pr (cons (hd (tl V1821)) (cons (cons stoutput ()) ())))) (true V1821)))

(defun shen.make-string-macro (V1822) (cond ((and (cons? V1822) (and (= make-string (hd V1822)) (cons? (tl V1822)))) (shen.mkstr (hd (tl V1822)) (tl (tl V1822)))) (true V1822)))

(defun shen.input-macro (V1823) (cond ((and (cons? V1823) (and (= lineread (hd V1823)) (= () (tl V1823)))) (cons lineread (cons (cons stinput ()) ()))) ((and (cons? V1823) (and (= input (hd V1823)) (= () (tl V1823)))) (cons input (cons (cons stinput ()) ()))) ((and (cons? V1823) (and (= read (hd V1823)) (= () (tl V1823)))) (cons read (cons (cons stinput ()) ()))) ((and (cons? V1823) (and (= input+ (hd V1823)) (and (cons? (tl V1823)) (= () (tl (tl V1823)))))) (cons input+ (cons (hd (tl V1823)) (cons (cons stinput ()) ())))) ((and (cons? V1823) (and (= read-byte (hd V1823)) (= () (tl V1823)))) (if (shen.char-stinput? (stinput)) (cons string->n (cons (cons shen.read-unit-string (cons (cons stinput ()) ())) ())) (cons read-byte (cons (cons stinput ()) ())))) (true V1823)))

(defun shen.defcc-macro (V1824) (cond ((and (cons? V1824) (= defcc (hd V1824))) (shen.yacc->shen (tl V1824))) (true V1824)))

(defun shen.prolog-macro (V1825) (cond ((and (cons? V1825) (= prolog? (hd V1825))) (shen.call-prolog (tl V1825))) (true V1825)))

(defun shen.call-prolog (V1826) (let Bindings (cons shen.reset-prolog-vector ()) (let Lock (cons @v (cons true (cons 0 (cons (cons vector (cons 0 ())) ())))) (let Key 0 (let Continuation (cons freeze (cons true ())) (let CLiterals (compile (lambda X (shen.<body> X)) V1826) (let Received (shen.received V1826) (let B (gensym (protect V)) (let L (gensym (protect L)) (let K (gensym (protect K)) (let C (gensym (protect C)) (let Lambda (cons lambda (cons B (cons (cons lambda (cons L (cons (cons lambda (cons K (cons (cons lambda (cons C (cons (shen.continue Received CLiterals B L K C) ()))) ()))) ()))) ()))) (cons Lambda (cons Bindings (cons Lock (cons Key (cons Continuation ())))))))))))))))))

(defun shen.received (V1829) (cond ((and (cons? V1829) (and (= receive (hd V1829)) (and (cons? (tl V1829)) (= () (tl (tl V1829)))))) (tl V1829)) ((cons? V1829) (union (shen.received (hd V1829)) (shen.received (tl V1829)))) (true ())))

(defun shen.reset-prolog-vector () (address-> (value shen.*prolog-vector*) 1 2))

(defun receive (V1830) V1830)

(defun shen.defprolog-macro (V1831) (cond ((and (cons? V1831) (and (= defprolog (hd V1831)) (cons? (tl V1831)))) (shen.compile-prolog (hd (tl V1831)) (tl (tl V1831)))) (true V1831)))

(defun shen.datatype-macro (V1832) (cond ((and (cons? V1832) (and (= datatype (hd V1832)) (cons? (tl V1832)))) (let D (shen.intern-type (hd (tl V1832))) (let Compile (compile (lambda X (shen.<datatype> X)) (cons D (tl (tl V1832)))) D))) (true V1832)))

(defun shen.rcons_form (V1833) (cond ((cons? V1833) (cons cons (cons (shen.rcons_form (hd V1833)) (cons (shen.rcons_form (tl V1833)) ())))) (true V1833)))

(defun shen.intern-type (V1834) (intern (cn (str V1834) "#type")))

(defun shen.@s-macro (V1835) (cond ((and (cons? V1835) (and (= @s (hd V1835)) (and (cons? (tl V1835)) (and (cons? (tl (tl V1835))) (cons? (tl (tl (tl V1835)))))))) (cons @s (cons (hd (tl V1835)) (cons (shen.@s-macro (cons @s (tl (tl V1835)))) ())))) ((and (cons? V1835) (and (= @s (hd V1835)) (and (cons? (tl V1835)) (and (cons? (tl (tl V1835))) (and (= () (tl (tl (tl V1835)))) (string? (hd (tl V1835)))))))) (let E (explode (hd (tl V1835))) (if (> (length E) 1) (shen.@s-macro (cons @s (append E (tl (tl V1835))))) V1835))) (true V1835)))

(defun shen.synonyms-macro (V1836) (cond ((and (cons? V1836) (= synonyms (hd V1836))) (shen.synonyms-h (append (tl V1836) (value shen.*synonyms*)))) (true V1836)))

(defun shen.synonyms-h (V1837) (let CurryTypes (map (lambda X (shen.curry-type X)) V1837) (let Eval (eval (cons define (cons shen.demod (shen.compile-synonyms CurryTypes)))) synonyms)))

(defun shen.compile-synonyms (V1840) (cond ((= () V1840) (let X (gensym (protect X)) (cons X (cons -> (cons X ()))))) ((and (cons? V1840) (cons? (tl V1840))) (cons (shen.rcons_form (hd V1840)) (cons -> (cons (shen.rcons_form (hd (tl V1840))) (shen.compile-synonyms (tl (tl V1840))))))) (true (simple-error "synonyms requires an even number of arguments
"))))

(defun shen.nl-macro (V1841) (cond ((and (cons? V1841) (and (= nl (hd V1841)) (= () (tl V1841)))) (cons nl (cons 1 ()))) (true V1841)))

(defun shen.assoc-macro (V1842) (cond ((and (cons? V1842) (and (cons? (tl V1842)) (and (cons? (tl (tl V1842))) (and (cons? (tl (tl (tl V1842)))) (element? (hd V1842) (cons @p (cons @v (cons append (cons and (cons or (cons + (cons * (cons do ()))))))))))))) (cons (hd V1842) (cons (hd (tl V1842)) (cons (shen.assoc-macro (cons (hd V1842) (tl (tl V1842)))) ())))) (true V1842)))

(defun shen.let-macro (V1843) (cond ((and (cons? V1843) (and (= let (hd V1843)) (and (cons? (tl V1843)) (and (cons? (tl (tl V1843))) (and (cons? (tl (tl (tl V1843)))) (cons? (tl (tl (tl (tl V1843)))))))))) (cons let (cons (hd (tl V1843)) (cons (hd (tl (tl V1843))) (cons (shen.let-macro (cons let (tl (tl (tl V1843))))) ()))))) ((and (cons? V1843) (and (= let (hd V1843)) (and (cons? (tl V1843)) (and (cons? (tl (tl V1843))) (and (cons? (tl (tl (tl V1843)))) (= () (tl (tl (tl (tl V1843)))))))))) (if (variable? (hd (tl V1843))) V1843 (simple-error (shen.app (hd (tl V1843)) " is not a variable
" shen.s)))) (true V1843)))

(defun shen.abs-macro (V1844) (cond ((and (cons? V1844) (and (= /. (hd V1844)) (and (cons? (tl V1844)) (and (cons? (tl (tl V1844))) (cons? (tl (tl (tl V1844)))))))) (cons lambda (cons (hd (tl V1844)) (cons (shen.abs-macro (cons /. (tl (tl V1844)))) ())))) ((and (cons? V1844) (and (= /. (hd V1844)) (and (cons? (tl V1844)) (and (cons? (tl (tl V1844))) (= () (tl (tl (tl V1844)))))))) (if (variable? (hd (tl V1844))) (cons lambda (tl V1844)) (simple-error (shen.app (hd (tl V1844)) " is not a variable
" shen.s)))) (true V1844)))

(defun shen.cases-macro (V1847) (cond ((and (cons? V1847) (and (= cases (hd V1847)) (and (cons? (tl V1847)) (and (= true (hd (tl V1847))) (cons? (tl (tl V1847))))))) (hd (tl (tl V1847)))) ((and (cons? V1847) (and (= cases (hd V1847)) (and (cons? (tl V1847)) (and (cons? (tl (tl V1847))) (= () (tl (tl (tl V1847)))))))) (cons if (cons (hd (tl V1847)) (cons (hd (tl (tl V1847))) (cons (cons simple-error (cons "error: cases exhausted" ())) ()))))) ((and (cons? V1847) (and (= cases (hd V1847)) (and (cons? (tl V1847)) (cons? (tl (tl V1847)))))) (cons if (cons (hd (tl V1847)) (cons (hd (tl (tl V1847))) (cons (shen.cases-macro (cons cases (tl (tl (tl V1847))))) ()))))) ((and (cons? V1847) (and (= cases (hd V1847)) (and (cons? (tl V1847)) (= () (tl (tl V1847)))))) (simple-error "error: odd number of case elements
")) (true V1847)))

(defun shen.timer-macro (V1848) (cond ((and (cons? V1848) (and (= time (hd V1848)) (and (cons? (tl V1848)) (= () (tl (tl V1848)))))) (shen.let-macro (cons let (cons (protect Start) (cons (cons get-time (cons run ())) (cons (protect Result) (cons (hd (tl V1848)) (cons (protect Finish) (cons (cons get-time (cons run ())) (cons (protect Time) (cons (cons - (cons (protect Finish) (cons (protect Start) ()))) (cons (protect Message) (cons (cons pr (cons (cons cn (cons "
run time: " (cons (cons cn (cons (cons str (cons (protect Time) ())) (cons " secs
" ()))) ()))) (cons (cons stoutput ()) ()))) (cons (protect Result) ())))))))))))))) (true V1848)))

(defun shen.tuple-up (V1849) (cond ((cons? V1849) (cons @p (cons (hd V1849) (cons (shen.tuple-up (tl V1849)) ())))) (true V1849)))

(defun shen.put/get-macro (V1850) (cond ((and (cons? V1850) (and (= put (hd V1850)) (and (cons? (tl V1850)) (and (cons? (tl (tl V1850))) (and (cons? (tl (tl (tl V1850)))) (= () (tl (tl (tl (tl V1850)))))))))) (cons put (cons (hd (tl V1850)) (cons (hd (tl (tl V1850))) (cons (hd (tl (tl (tl V1850)))) (cons (cons value (cons *property-vector* ())) ())))))) ((and (cons? V1850) (and (= get (hd V1850)) (and (cons? (tl V1850)) (and (cons? (tl (tl V1850))) (= () (tl (tl (tl V1850)))))))) (cons get (cons (hd (tl V1850)) (cons (hd (tl (tl V1850))) (cons (cons value (cons *property-vector* ())) ()))))) ((and (cons? V1850) (and (= unput (hd V1850)) (and (cons? (tl V1850)) (and (cons? (tl (tl V1850))) (= () (tl (tl (tl V1850)))))))) (cons unput (cons (hd (tl V1850)) (cons (hd (tl (tl V1850))) (cons (cons value (cons *property-vector* ())) ()))))) (true V1850)))

(defun undefmacro (V1851) (do (set *macros* (remove (assoc V1851 (value *macros*)) (value *macros*))) V1851))
