(defun cl.kl-to-lisp (V1046) (cl.kl-to-lisp-h () V1046))

(defun cl.kl-to-lisp-h (V1054 V1055) (cond ((= T (MEMBER V1055 V1054)) V1055) ((and (cons? V1055) (and (= type (hd V1055)) (and (cons? (tl V1055)) (and (cons? (tl (tl V1055))) (= () (tl (tl (tl V1055)))))))) (cl.kl-to-lisp-h V1054 (hd (tl V1055)))) ((and (cons? V1055) (and (= protect (hd V1055)) (and (cons? (tl V1055)) (= () (tl (tl V1055)))))) (cl.kl-to-lisp-h V1054 (hd (tl V1055)))) ((and (cons? V1055) (and (= lambda (hd V1055)) (and (cons? (tl V1055)) (and (cons? (tl (tl V1055))) (and (= () (tl (tl (tl V1055)))) (= (hd (tl V1055)) T)))))) (cl.kl-to-lisp-h V1054 (cl.rectify-t V1055))) ((and (cons? V1055) (and (= lambda (hd V1055)) (and (cons? (tl V1055)) (and (cons? (tl (tl V1055))) (= () (tl (tl (tl V1055)))))))) (cons FUNCTION (cons (cons LAMBDA (cons (cons (hd (tl V1055)) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V1055)) V1054) (hd (tl (tl V1055)))) ()))) ()))) ((and (cons? V1055) (and (= let (hd V1055)) (and (cons? (tl V1055)) (and (cons? (tl (tl V1055))) (and (cons? (tl (tl (tl V1055)))) (and (= () (tl (tl (tl (tl V1055))))) (= (hd (tl V1055)) T))))))) (cl.kl-to-lisp-h V1054 (cl.rectify-t V1055))) ((and (cons? V1055) (and (= let (hd V1055)) (and (cons? (tl V1055)) (and (cons? (tl (tl V1055))) (and (cons? (tl (tl (tl V1055)))) (= () (tl (tl (tl (tl V1055)))))))))) (cons LET (cons (cons (cons (hd (tl V1055)) (cons (cl.kl-to-lisp-h V1054 (hd (tl (tl V1055)))) ())) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V1055)) V1054) (hd (tl (tl (tl V1055))))) ())))) ((and (cons? V1055) (and (= defun (hd V1055)) (and (cons? (tl V1055)) (and (cons? (tl (tl V1055))) (and (cons? (tl (tl (tl V1055)))) (= () (tl (tl (tl (tl V1055)))))))))) (cons DEFUN (cons (hd (tl V1055)) (cons (hd (tl (tl V1055))) (cons (cl.kl-to-lisp-h (hd (tl (tl V1055))) (hd (tl (tl (tl V1055))))) ()))))) ((and (cons? V1055) (= cond (hd V1055))) (cons COND (CL.MAPCAR (lambda C (cl.cond-code V1054 C)) (tl V1055)))) ((and (cons? V1055) (or (= T (MEMBER (hd V1055) V1054)) (cons? (hd V1055)))) (let Lisp (CL.MAPCAR (lambda Y (cl.kl-to-lisp-h V1054 Y)) V1055) (cl.currylisp Lisp))) ((and (cons? V1055) (cl.fastsymbol? (hd V1055))) (let LispX (CL.MAPCAR (lambda Y (cl.kl-to-lisp-h V1054 Y)) (tl V1055)) (let LispF (cl.maplispsym (hd V1055)) (cl.optimise-application (cons LispF LispX))))) ((or (number? V1055) (or (string? V1055) (empty? V1055))) V1055) (true (cons QUOTE (cons V1055 ())))))

(defun cl.rectify-t (V1056) (SUBST (GENSYM "x") T V1056))

(defun cl.currylisp (V1057) (cond ((and (cons? V1057) (and (cons? (tl V1057)) (cons? (tl (tl V1057))))) (cl.currylisp (cons (cons FUNCALL (cons (hd V1057) (cons (hd (tl V1057)) ()))) (tl (tl V1057))))) ((and (cons? V1057) (and (cons? (tl V1057)) (= () (tl (tl V1057))))) (cons FUNCALL V1057)) ((and (cons? V1057) (= () (tl V1057))) (cons FUNCALL V1057)) (true V1057)))

(defun cl.optimise-application (V1058) (cond ((and (cons? V1058) (and (= protect (hd V1058)) (and (cons? (tl V1058)) (= () (tl (tl V1058)))))) (cl.optimise-application (hd (tl V1058)))) ((and (cons? V1058) (and (= hd (hd V1058)) (and (cons? (tl V1058)) (= () (tl (tl V1058)))))) (cons CAR (cons (cl.optimise-application (hd (tl V1058))) ()))) ((and (cons? V1058) (and (= tl (hd V1058)) (and (cons? (tl V1058)) (= () (tl (tl V1058)))))) (cons CDR (cons (cl.optimise-application (hd (tl V1058))) ()))) ((and (cons? V1058) (and (= cons (hd V1058)) (and (cons? (tl V1058)) (and (cons? (tl (tl V1058))) (= () (tl (tl (tl V1058)))))))) (cons CONS (cons (cl.optimise-application (hd (tl V1058))) (cons (cl.optimise-application (hd (tl (tl V1058)))) ())))) ((and (cons? V1058) (and (= append (hd V1058)) (and (cons? (tl V1058)) (and (cons? (tl (tl V1058))) (= () (tl (tl (tl V1058)))))))) (cons APPEND (cons (cl.optimise-application (hd (tl V1058))) (cons (cl.optimise-application (hd (tl (tl V1058)))) ())))) ((and (cons? V1058) (and (= reverse (hd V1058)) (and (cons? (tl V1058)) (= () (tl (tl V1058)))))) (cons REVERSE (cons (cl.optimise-application (hd (tl V1058))) ()))) ((and (cons? V1058) (and (= length (hd V1058)) (and (cons? (tl V1058)) (= () (tl (tl V1058)))))) (cons CL.LIST-LENGTH (cons (cl.optimise-application (hd (tl V1058))) ()))) ((and (cons? V1058) (and (= if (hd V1058)) (and (cons? (tl V1058)) (and (cons? (tl (tl V1058))) (and (cons? (tl (tl (tl V1058)))) (= () (tl (tl (tl (tl V1058)))))))))) (cons IF (cons (cl.wrap (hd (tl V1058))) (cons (cl.optimise-application (hd (tl (tl V1058)))) (cons (cl.optimise-application (hd (tl (tl (tl V1058))))) ()))))) ((and (cons? V1058) (and (= value (hd V1058)) (and (cons? (tl V1058)) (and (cons? (hd (tl V1058))) (and (cons? (tl (hd (tl V1058)))) (and (= () (tl (tl (hd (tl V1058))))) (and (= () (tl (tl V1058))) (= (hd (hd (tl V1058))) QUOTE)))))))) (hd (tl (hd (tl V1058))))) ((and (cons? V1058) (and (= map (hd V1058)) (and (cons? (tl V1058)) (and (cons? (tl (tl V1058))) (= () (tl (tl (tl V1058)))))))) (cons CL.MAPCAR (tl V1058))) ((and (cons? V1058) (and (= + (hd V1058)) (and (cons? (tl V1058)) (and (= 1 (hd (tl V1058))) (and (cons? (tl (tl V1058))) (= () (tl (tl (tl V1058))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl (tl V1058)))) ()))) ((and (cons? V1058) (and (= + (hd V1058)) (and (cons? (tl V1058)) (and (cons? (tl (tl V1058))) (and (= 1 (hd (tl (tl V1058)))) (= () (tl (tl (tl V1058))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl V1058))) ()))) ((and (cons? V1058) (and (= - (hd V1058)) (and (cons? (tl V1058)) (and (cons? (tl (tl V1058))) (and (= 1 (hd (tl (tl V1058)))) (= () (tl (tl (tl V1058))))))))) (cons (intern "1-") (cons (cl.optimise-application (hd (tl V1058))) ()))) ((cons? V1058) (CL.MAPCAR (lambda Z (cl.optimise-application Z)) V1058)) (true V1058)))

(defun cl.cond-code (V1063 V1064) (cond ((and (cons? V1064) (and (cons? (tl V1064)) (= () (tl (tl V1064))))) (let LispTest (cl.wrap (cl.kl-to-lisp-h V1063 (hd V1064))) (let LispResult (cl.kl-to-lisp-h V1063 (hd (tl V1064))) (cons LispTest (cons LispResult ()))))) (true (simple-error "implementation error in shen.cond-code"))))

(defun cl.wrap (V1065) (cond ((and (cons? V1065) (and (cons? (tl V1065)) (and (= true (hd (tl V1065))) (and (= () (tl (tl V1065))) (= (hd V1065) QUOTE))))) T) ((and (cons? V1065) (and (= cons? (hd V1065)) (and (cons? (tl V1065)) (= () (tl (tl V1065)))))) (cons CONSP (tl V1065))) ((and (cons? V1065) (and (= string? (hd V1065)) (and (cons? (tl V1065)) (= () (tl (tl V1065)))))) (cons STRINGP (tl V1065))) ((and (cons? V1065) (and (= number? (hd V1065)) (and (cons? (tl V1065)) (= () (tl (tl V1065)))))) (cons NUMBERP (tl V1065))) ((and (cons? V1065) (and (= empty? (hd V1065)) (and (cons? (tl V1065)) (= () (tl (tl V1065)))))) (cons NULL (tl V1065))) ((and (cons? V1065) (and (= and (hd V1065)) (and (cons? (tl V1065)) (and (cons? (tl (tl V1065))) (= () (tl (tl (tl V1065)))))))) (cons AND (cons (cl.wrap (hd (tl V1065))) (cons (cl.wrap (hd (tl (tl V1065)))) ())))) ((and (cons? V1065) (and (= or (hd V1065)) (and (cons? (tl V1065)) (and (cons? (tl (tl V1065))) (= () (tl (tl (tl V1065)))))))) (cons OR (cons (cl.wrap (hd (tl V1065))) (cons (cl.wrap (hd (tl (tl V1065)))) ())))) ((and (cons? V1065) (and (= not (hd V1065)) (and (cons? (tl V1065)) (= () (tl (tl V1065)))))) (cons NOT (cons (cl.wrap (hd (tl V1065))) ()))) ((and (cons? V1065) (and (= cl.equal? (hd V1065)) (and (cons? (tl V1065)) (and (cons? (tl (tl V1065))) (and (= () (hd (tl (tl V1065)))) (= () (tl (tl (tl V1065))))))))) (cons NULL (cons (hd (tl V1065)) ()))) ((and (cons? V1065) (and (= cl.equal? (hd V1065)) (and (cons? (tl V1065)) (and (= () (hd (tl V1065))) (and (cons? (tl (tl V1065))) (= () (tl (tl (tl V1065))))))))) (cons NULL (tl (tl V1065)))) ((and (cons? V1065) (and (= cl.equal? (hd V1065)) (and (cons? (tl V1065)) (and (cons? (tl (tl V1065))) (and (cons? (hd (tl (tl V1065)))) (and (cons? (tl (hd (tl (tl V1065))))) (and (= () (tl (tl (hd (tl (tl V1065)))))) (and (= () (tl (tl (tl V1065)))) (and (= (hd (hd (tl (tl V1065)))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl (tl V1065))))))))))))))) (cons EQ (tl V1065))) ((and (cons? V1065) (and (= cl.equal? (hd V1065)) (and (cons? (tl V1065)) (and (cons? (hd (tl V1065))) (and (cons? (tl (hd (tl V1065)))) (and (= () (tl (tl (hd (tl V1065))))) (and (cons? (tl (tl V1065))) (and (= () (tl (tl (tl V1065)))) (and (= (hd (hd (tl V1065))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl V1065)))))))))))))) (cons EQ (tl V1065))) ((and (cons? V1065) (and (= cl.equal? (hd V1065)) (and (cons? (tl V1065)) (and (cons? (hd (tl V1065))) (and (= fail (hd (hd (tl V1065)))) (and (= () (tl (hd (tl V1065)))) (and (cons? (tl (tl V1065))) (= () (tl (tl (tl V1065))))))))))) (cons EQ (tl V1065))) ((and (cons? V1065) (and (= cl.equal? (hd V1065)) (and (cons? (tl V1065)) (and (cons? (tl (tl V1065))) (and (cons? (hd (tl (tl V1065)))) (and (= fail (hd (hd (tl (tl V1065))))) (and (= () (tl (hd (tl (tl V1065))))) (= () (tl (tl (tl V1065))))))))))) (cons EQ (tl V1065))) ((and (cons? V1065) (and (= cl.equal? (hd V1065)) (and (cons? (tl V1065)) (and (cons? (tl (tl V1065))) (and (= () (tl (tl (tl V1065)))) (string? (hd (tl V1065)))))))) (cons EQUAL (tl V1065))) ((and (cons? V1065) (and (= cl.equal? (hd V1065)) (and (cons? (tl V1065)) (and (cons? (tl (tl V1065))) (and (= () (tl (tl (tl V1065)))) (string? (hd (tl (tl V1065))))))))) (cons EQUAL (tl V1065))) ((and (cons? V1065) (and (= cl.equal? (hd V1065)) (and (cons? (tl V1065)) (and (cons? (tl (tl V1065))) (and (= () (tl (tl (tl V1065)))) (number? (hd (tl V1065)))))))) (cons EQL (tl V1065))) ((and (cons? V1065) (and (= cl.equal? (hd V1065)) (and (cons? (tl V1065)) (and (cons? (tl (tl V1065))) (and (= () (tl (tl (tl V1065)))) (number? (hd (tl (tl V1065))))))))) (cons EQL (tl V1065))) ((and (cons? V1065) (and (= cl.equal? (hd V1065)) (and (cons? (tl V1065)) (and (cons? (tl (tl V1065))) (= () (tl (tl (tl V1065)))))))) (cons shen.ABSEQUAL (tl V1065))) ... etc))

(defun cl.fastsymbol? (V1072) (cond ((cons? V1072) false) ((= () V1072) false) ((string? V1072) false) ((number? V1072) false) (true true)))

(defun cl.wrapper (V1073) (cond ((= true V1073) T) ((= false V1073) ()) (true (simple-error "boolean expected"))))

(defun cl.maplispsym (V1074) (cond ((= = V1074) cl.equal?) ((= > V1074) cl.greater?) ((= < V1074) cl.less?) ((= >= V1074) cl.greater-than-or-equal-to?) ((= <= V1074) cl.less-than-or-equal-to?) ((= + V1074) cl.add) ((= - V1074) cl.subtract) ((= / V1074) cl.divide) ((= * V1074) cl.multiply) (true V1074)))
