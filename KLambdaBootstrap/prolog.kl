(defun shen.compile-prolog (V2057 V2058) (compile (lambda X (shen.<defprolog> X)) (cons V2057 V2058)))

(defun shen.<defprolog> (V2059) (let Result (if (shen.non-empty-stream? V2059) (let F (shen.hds V2059) (let News1853 (shen.tls V2059) (let Parseshen.<clauses> (shen.<clauses> News1853) (if (shen.parse-failure? Parseshen.<clauses>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<clauses>) (let Aritycheck (shen.prolog-arity-check F (shen.<-out Parseshen.<clauses>)) (let LeftLinear (map (lambda X (shen.linearise-clause X)) (shen.<-out Parseshen.<clauses>)) (shen.horn-clause-procedure F LeftLinear)))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<clauses> (V2060) (let Result (let Parseshen.<clause> (shen.<clause> V2060) (if (shen.parse-failure? Parseshen.<clause>) (shen.parse-failure) (let Parseshen.<clauses> (shen.<clauses> Parseshen.<clause>) (if (shen.parse-failure? Parseshen.<clauses>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<clauses>) (cons (shen.<-out Parseshen.<clause>) (shen.<-out Parseshen.<clauses>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<!> (<!> V2060) (if (shen.parse-failure? Parse<!>) (shen.parse-failure) (shen.comb (shen.in-> Parse<!>) (if (empty? (shen.<-out Parse<!>)) () (simple-error (cn "Prolog syntax error here:
 " (shen.app (shen.<-out Parse<!>) "
 ..." shen.r))))))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.prolog-arity-check (V2065 V2066) (cond ((and (cons? V2066) (= () (tl V2066))) shen.skip) ((and (cons? V2066) (and (cons? (hd V2066)) (and (cons? (tl (hd V2066))) (= () (tl (tl (hd V2066))))))) (shen.pac-h V2065 (length (hd (hd V2066))) (tl V2066))) (true (shen.f-error shen.prolog-arity-check))))

(defun shen.linearise-clause (V2067) (cond ((and (cons? V2067) (and (cons? (tl V2067)) (= () (tl (tl V2067))))) (shen.lch (shen.linearise (@p (hd V2067) (hd (tl V2067)))))) (true (shen.f-error shen.linearise-clause))))

(defun shen.lch (V2068) (cond ((tuple? V2068) (cons (fst V2068) (cons (shen.lchh (snd V2068)) ()))) (true (shen.f-error shen.lch))))

(defun shen.lchh (V2069) (cond ((and (cons? V2069) (and (= where (hd V2069)) (and (cons? (tl V2069)) (and (cons? (hd (tl V2069))) (and (= = (hd (hd (tl V2069)))) (and (cons? (tl (hd (tl V2069)))) (and (cons? (tl (tl (hd (tl V2069))))) (and (= () (tl (tl (tl (hd (tl V2069)))))) (and (cons? (tl (tl V2069))) (= () (tl (tl (tl V2069))))))))))))) (cons (cons (if (value shen.*occurs*) is! is) (tl (hd (tl V2069)))) (shen.lchh (hd (tl (tl V2069)))))) (true V2069)))

(defun shen.pac-h (V2076 V2077 V2078) (cond ((= () V2078) true) ((and (cons? V2078) (cons? (hd V2078))) (if (= V2077 (length (hd (hd V2078)))) (shen.pac-h V2076 V2077 (tl V2078)) (simple-error (cn "arity error in prolog procedure " (shen.app V2076 "
" shen.a))))) (true (shen.f-error shen.pac-h))))

(defun shen.<clause> (V2079) (let Result (let Parseshen.<head> (shen.<head> V2079) (if (shen.parse-failure? Parseshen.<head>) (shen.parse-failure) (if (shen.=hd? Parseshen.<head> <--) (let News1856 (shen.tls Parseshen.<head>) (let Parseshen.<body> (shen.<body> News1856) (if (shen.parse-failure? Parseshen.<body>) (shen.parse-failure) (let Parseshen.<sc> (shen.<sc> Parseshen.<body>) (if (shen.parse-failure? Parseshen.<sc>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<sc>) (cons (shen.<-out Parseshen.<head>) (cons (shen.<-out Parseshen.<body>) ())))))))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<head> (V2080) (let Result (let Parseshen.<hterm> (shen.<hterm> V2080) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<head> (shen.<head> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<head>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<head>) (cons (shen.<-out Parseshen.<hterm>) (shen.<-out Parseshen.<head>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V2080) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<hterm> (V2081) (let Result (if (shen.non-empty-stream? V2081) (let X (shen.hds V2081) (let News1859 (shen.tls V2081) (if (and (atom? X) (not (shen.prolog-keyword? X))) (shen.comb (shen.in-> News1859) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.non-empty-stream? V2081) (let X (shen.hds V2081) (let News1860 (shen.tls V2081) (if (= X (intern ":")) (shen.comb (shen.in-> News1860) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2081) (let SynCons (shen.comb (shen.hds V2081) (shen.<-out V2081)) (if (shen.=hd? SynCons cons) (let News1861 (shen.tls SynCons) (let Parseshen.<hterm1> (shen.<hterm1> News1861) (if (shen.parse-failure? Parseshen.<hterm1>) (shen.parse-failure) (let Parseshen.<hterm2> (shen.<hterm2> Parseshen.<hterm1>) (if (shen.parse-failure? Parseshen.<hterm2>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm2>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2081)) (cons cons (cons (shen.<-out Parseshen.<hterm1>) (cons (shen.<-out Parseshen.<hterm2>) ()))))))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2081) (let SynCons (shen.comb (shen.hds V2081) (shen.<-out V2081)) (if (shen.=hd? SynCons +) (let News1862 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News1862) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2081)) (cons shen.+m (cons (shen.<-out Parseshen.<hterm>) ())))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2081) (let SynCons (shen.comb (shen.hds V2081) (shen.<-out V2081)) (if (shen.=hd? SynCons -) (let News1863 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News1863) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<hterm>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2081)) (cons shen.-m (cons (shen.<-out Parseshen.<hterm>) ())))))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2081) (let SynCons (shen.comb (shen.hds V2081) (shen.<-out V2081)) (if (shen.=hd? SynCons mode) (let News1864 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News1864) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (if (shen.=hd? Parseshen.<hterm> +) (let News1865 (shen.tls Parseshen.<hterm>) (let Parseshen.<end> (shen.<end> News1865) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2081)) (cons shen.+m (cons (shen.<-out Parseshen.<hterm>) ())))))) (shen.parse-failure))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2081) (let SynCons (shen.comb (shen.hds V2081) (shen.<-out V2081)) (if (shen.=hd? SynCons mode) (let News1866 (shen.tls SynCons) (let Parseshen.<hterm> (shen.<hterm> News1866) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (if (shen.=hd? Parseshen.<hterm> -) (let News1867 (shen.tls Parseshen.<hterm>) (let Parseshen.<end> (shen.<end> News1867) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2081)) (cons shen.-m (cons (shen.<-out Parseshen.<hterm>) ())))))) (shen.parse-failure))))) (shen.parse-failure))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)) Result)) Result)) Result)) Result)))

(defun shen.prolog-keyword? (V2082) (element? V2082 (cons (intern ";") (cons <-- ()))))

(defun atom? (V2083) (or (symbol? V2083) (or (string? V2083) (or (boolean? V2083) (or (number? V2083) (empty? V2083))))))

(defun shen.<hterm1> (V2084) (let Result (let Parseshen.<hterm> (shen.<hterm> V2084) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<hterm>) (shen.<-out Parseshen.<hterm>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<hterm2> (V2085) (let Result (let Parseshen.<hterm> (shen.<hterm> V2085) (if (shen.parse-failure? Parseshen.<hterm>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<hterm>) (shen.<-out Parseshen.<hterm>)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<body> (V2086) (let Result (let Parseshen.<literal> (shen.<literal> V2086) (if (shen.parse-failure? Parseshen.<literal>) (shen.parse-failure) (let Parseshen.<body> (shen.<body> Parseshen.<literal>) (if (shen.parse-failure? Parseshen.<body>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<body>) (cons (shen.<-out Parseshen.<literal>) (shen.<-out Parseshen.<body>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V2086) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<literal> (V2087) (let Result (if (shen.=hd? V2087 !) (let News1872 (shen.tls V2087) (shen.comb (shen.in-> News1872) !)) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2087) (let SynCons (shen.comb (shen.hds V2087) (shen.<-out V2087)) (let Parseshen.<bterms> (shen.<bterms> SynCons) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<bterms>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2087)) (shen.<-out Parseshen.<bterms>))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<bterms> (V2088) (let Result (let Parseshen.<bterm> (shen.<bterm> V2088) (if (shen.parse-failure? Parseshen.<bterm>) (shen.parse-failure) (let Parseshen.<bterms> (shen.<bterms> Parseshen.<bterm>) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<bterms>) (cons (shen.<-out Parseshen.<bterm>) (shen.<-out Parseshen.<bterms>))))))) (if (shen.parse-failure? Result) (let Result (let Parse<e> (<e> V2088) (if (shen.parse-failure? Parse<e>) (shen.parse-failure) (shen.comb (shen.in-> Parse<e>) ()))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<bterm> (V2089) (let Result (let Parseshen.<wildcard> (shen.<wildcard> V2089) (if (shen.parse-failure? Parseshen.<wildcard>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<wildcard>) (shen.<-out Parseshen.<wildcard>)))) (if (shen.parse-failure? Result) (let Result (if (shen.non-empty-stream? V2089) (let X (shen.hds V2089) (let News1875 (shen.tls V2089) (if (atom? X) (shen.comb (shen.in-> News1875) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (let Result (if (shen.ccons? V2089) (let SynCons (shen.comb (shen.hds V2089) (shen.<-out V2089)) (let Parseshen.<bterms> (shen.<bterms> SynCons) (if (shen.parse-failure? Parseshen.<bterms>) (shen.parse-failure) (let Parseshen.<end> (shen.<end> Parseshen.<bterms>) (if (shen.parse-failure? Parseshen.<end>) (shen.parse-failure) (shen.comb (shen.in-> (shen.tlstream V2089)) (shen.<-out Parseshen.<bterms>))))))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)))

(defun shen.<wildcard> (V2090) (let Result (if (shen.non-empty-stream? V2090) (let X (shen.hds V2090) (let News1877 (shen.tls V2090) (if (= X _) (shen.comb (shen.in-> News1877) (gensym (protect Y))) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.<sc> (V2091) (let Result (if (shen.non-empty-stream? V2091) (let X (shen.hds V2091) (let News1879 (shen.tls V2091) (if (shen.semicolon? X) (shen.comb (shen.in-> News1879) X) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.semicolon? (V2092) (= V2092 (intern ";")))

(defun shen.horn-clause-procedure (V2093 V2094) (let Bindings (gensym (protect B)) (let Lock (gensym (protect L)) (let Key (gensym (protect K)) (let Continuation (gensym (protect C)) (let Parameters (shen.prolog-parameters V2094) (let HasCut? (shen.hascut? V2094) (let FBody (shen.prolog-fbody V2094 Parameters Bindings Lock Key Continuation HasCut?) (let CutFBody (if HasCut? (cons let (cons Key (cons (cons + (cons Key (cons 1 ()))) (cons FBody ())))) FBody) (let Shen (cons define (cons V2093 (append Parameters (append (cons Bindings (cons Lock (cons Key (cons Continuation (cons -> ()))))) (cons CutFBody ()))))) Shen))))))))))

(defun shen.hascut? (V2097) (cond ((= ! V2097) true) ((cons? V2097) (or (shen.hascut? (hd V2097)) (shen.hascut? (tl V2097)))) (true false)))

(defun shen.prolog-parameters (V2102) (cond ((and (cons? V2102) (cons? (hd V2102))) (shen.parameters (length (hd (hd V2102))))) (true (shen.f-error shen.prolog-parameters))))

(defun shen.prolog-fbody (V2123 V2124 V2125 V2126 V2127 V2128 V2129) (cond ((and (= () V2123) (= true V2129)) (cons shen.unlock (cons V2126 (cons V2127 ())))) ((and (cons? V2123) (and (cons? (hd V2123)) (and (cons? (tl (hd V2123))) (and (= () (tl (tl (hd V2123)))) (and (= () (tl V2123)) (= false V2129)))))) (let Continue (shen.continue (hd (hd V2123)) (hd (tl (hd V2123))) V2125 V2126 V2127 V2128) (cons if (cons (cons shen.unlocked? (cons V2126 ())) (cons (shen.compile-head shen.+m (hd (hd V2123)) V2124 V2125 Continue) (cons false ())))))) ((and (cons? V2123) (and (cons? (hd V2123)) (and (cons? (tl (hd V2123))) (= () (tl (tl (hd V2123))))))) (let Case (protect (gensym C)) (let Continue (shen.continue (hd (hd V2123)) (hd (tl (hd V2123))) V2125 V2126 V2127 V2128) (cons let (cons Case (cons (cons if (cons (cons shen.unlocked? (cons V2126 ())) (cons (shen.compile-head shen.+m (hd (hd V2123)) V2124 V2125 Continue) (cons false ())))) (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons (shen.prolog-fbody (tl V2123) V2124 V2125 V2126 V2127 V2128 V2129) (cons Case ())))) ()))))))) (true (simple-error "implementation error in shen.prolog-fbody"))))

(defun shen.unlock (V2130 V2131) (if (and (shen.locked? V2130) (shen.fits? V2131 V2130)) (shen.openlock V2130) false))

(defun shen.locked? (V2132) (not (shen.unlocked? V2132)))

(defun shen.unlocked? (V2133) (<-address V2133 1))

(defun shen.openlock (V2134) (do (address-> V2134 1 true) false))

(defun shen.fits? (V2135 V2136) (= V2135 (<-address V2136 2)))

(defun shen.cut (V2139 V2140 V2141 V2142) (let Compute (thaw V2142) (if (and (= Compute false) (shen.unlocked? V2140)) (shen.lock V2141 V2140) Compute)))

(defun shen.lock (V2143 V2144) (let SetLock (address-> V2144 1 false) (let SetKey (address-> V2144 2 V2143) false)))

(defun shen.continue (V2145 V2146 V2147 V2148 V2149 V2150) (let HVs (shen.extract-vars V2145) (let BVs (shen.extract-vars V2146) (let Free (difference BVs HVs) (let ContinuationCode (cons do (cons (cons shen.incinfs ()) (cons (shen.compile-body V2146 V2147 V2148 V2149 V2150) ()))) (shen.stpart Free ContinuationCode V2147))))))

(defun shen.compile-body (V2167 V2168 V2169 V2170 V2171) (cond ((= () V2167) (cons thaw (cons V2171 ()))) ((and (cons? V2167) (= ! (hd V2167))) (shen.compile-body (cons (cons shen.cut ()) (tl V2167)) V2168 V2169 V2170 V2171)) ((and (cons? V2167) (= () (tl V2167))) (append (shen.deref-calls (hd V2167) V2168) (cons V2168 (cons V2169 (cons V2170 (cons V2171 ())))))) ((cons? V2167) (let P* (shen.deref-calls (hd V2167) V2168) (append P* (cons V2168 (cons V2169 (cons V2170 (cons (shen.freeze-literals (tl V2167) V2168 V2169 V2170 V2171) ()))))))) (true (simple-error "implementation error in shen.compile-fbody"))))

(defun shen.freeze-literals (V2188 V2189 V2190 V2191 V2192) (cond ((= () V2188) V2192) ((and (cons? V2188) (= ! (hd V2188))) (shen.freeze-literals (cons (cons shen.cut ()) (tl V2188)) V2189 V2190 V2191 V2192)) ((cons? V2188) (let P* (shen.deref-calls (hd V2188) V2189) (cons freeze (cons (append P* (cons V2189 (cons V2190 (cons V2191 (cons (shen.freeze-literals (tl V2188) V2189 V2190 V2191 V2192) ()))))) ())))) (true (simple-error "implementation error in shen.freeze-literals"))))

(defun shen.deref-calls (V2197 V2198) (cond ((and (cons? V2197) (= fork (hd V2197))) (cons fork (cons (shen.deref-forked-literals (tl V2197) V2198) ()))) ((cons? V2197) (cons (hd V2197) (map (lambda Y (shen.function-calls Y V2198)) (tl V2197)))) (true (simple-error "implementation error in shen.deref-calls"))))

(defun shen.deref-forked-literals (V2205 V2206) (cond ((= () V2205) ()) ((cons? V2205) (cons cons (cons (shen.deref-calls (hd V2205) V2206) (cons (shen.deref-forked-literals (tl V2205) V2206) ())))) (true (simple-error "fork requires a list of literals
"))))

(defun shen.function-calls (V2209 V2210) (cond ((and (cons? V2209) (and (= cons (hd V2209)) (and (cons? (tl V2209)) (and (cons? (tl (tl V2209))) (= () (tl (tl (tl V2209)))))))) (cons cons (cons (shen.function-calls (hd (tl V2209)) V2210) (cons (shen.function-calls (hd (tl (tl V2209))) V2210) ())))) ((cons? V2209) (shen.deref-terms V2209 V2210)) (true V2209)))

(defun shen.deref-terms (V2215 V2216) (cond ((and (cons? V2215) (and (= 0 (hd V2215)) (and (cons? (tl V2215)) (= () (tl (tl V2215)))))) (if (variable? (hd (tl V2215))) (hd (tl V2215)) (simple-error (cn "attempt to optimise a non-variable " (shen.app (hd (tl V2215)) "
" shen.s))))) ((and (cons? V2215) (and (= 1 (hd V2215)) (and (cons? (tl V2215)) (= () (tl (tl V2215)))))) (if (variable? (hd (tl V2215))) (cons shen.lazyderef (cons (hd (tl V2215)) (cons V2216 ()))) (simple-error (cn "attempt to optimise a non-variable " (shen.app (hd (tl V2215)) "
" shen.s))))) ((variable? V2215) (cons shen.deref (cons V2215 (cons V2216 ())))) ((cons? V2215) (map (lambda Z (shen.deref-terms Z V2216)) V2215)) (true V2215)))

(defun shen.compile-head (V2234 V2235 V2236 V2237 V2238) (cond ((and (= () V2235) (= () V2236)) V2238) ((and (cons? V2235) (and (cons? (hd V2235)) (and (= shen.+m (hd (hd V2235))) (and (cons? (tl (hd V2235))) (= () (tl (tl (hd V2235)))))))) (shen.compile-head V2234 (cons shen.+m (cons (hd (tl (hd V2235))) (cons V2234 (tl V2235)))) V2236 V2237 V2238)) ((and (cons? V2235) (and (cons? (hd V2235)) (and (= shen.-m (hd (hd V2235))) (and (cons? (tl (hd V2235))) (= () (tl (tl (hd V2235)))))))) (shen.compile-head V2234 (cons shen.-m (cons (hd (tl (hd V2235))) (cons V2234 (tl V2235)))) V2236 V2237 V2238)) ((and (cons? V2235) (= shen.-m (hd V2235))) (shen.compile-head shen.-m (tl V2235) V2236 V2237 V2238)) ((and (cons? V2235) (= shen.+m (hd V2235))) (shen.compile-head shen.+m (tl V2235) V2236 V2237 V2238)) ((and (cons? V2235) (and (cons? V2236) (shen.wildcard? (hd V2235)))) (shen.compile-head V2234 (tl V2235) (tl V2236) V2237 V2238)) ((and (cons? V2235) (variable? (hd V2235))) (shen.variable-case V2234 V2235 V2236 V2237 V2238)) ((and (= shen.-m V2234) (and (cons? V2235) (atom? (hd V2235)))) (shen.atom-case-minus V2235 V2236 V2237 V2238)) ((and (= shen.-m V2234) (and (cons? V2235) (and (cons? (hd V2235)) (and (= cons (hd (hd V2235))) (and (cons? (tl (hd V2235))) (and (cons? (tl (tl (hd V2235)))) (= () (tl (tl (tl (hd V2235))))))))))) (shen.cons-case-minus V2235 V2236 V2237 V2238)) ((and (= shen.+m V2234) (and (cons? V2235) (atom? (hd V2235)))) (shen.atom-case-plus V2235 V2236 V2237 V2238)) ((and (= shen.+m V2234) (and (cons? V2235) (and (cons? (hd V2235)) (and (= cons (hd (hd V2235))) (and (cons? (tl (hd V2235))) (and (cons? (tl (tl (hd V2235)))) (= () (tl (tl (tl (hd V2235))))))))))) (shen.cons-case-plus V2235 V2236 V2237 V2238)) (true (simple-error "implementation error in shen.compile-head"))))

(defun shen.variable-case (V2249 V2250 V2251 V2252 V2253) (cond ((and (cons? V2250) (cons? V2251)) (if (variable? (hd V2251)) (shen.compile-head V2249 (tl V2250) (tl V2251) V2252 (subst (hd V2251) (hd V2250) V2253)) (cons let (cons (hd V2250) (cons (hd V2251) (cons (shen.compile-head V2249 (tl V2250) (tl V2251) V2252 V2253) ())))))) (true (simple-error "implementation error in shen.variable-case"))))

(defun shen.atom-case-minus (V2262 V2263 V2264 V2265) (cond ((and (cons? V2262) (cons? V2263)) (let Tm (gensym (protect Tm)) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V2263) (cons V2264 ()))) (cons (cons if (cons (cons = (cons Tm (cons (hd V2262) ()))) (cons (shen.compile-head shen.-m (tl V2262) (tl V2263) V2264 V2265) (cons false ())))) ())))))) (true (simple-error "implementation error in shen.atom-case-minus"))))

(defun shen.cons-case-minus (V2274 V2275 V2276 V2277) (cond ((and (cons? V2274) (and (cons? (hd V2274)) (and (= cons (hd (hd V2274))) (and (cons? (tl (hd V2274))) (and (cons? (tl (tl (hd V2274)))) (and (= () (tl (tl (tl (hd V2274))))) (cons? V2275))))))) (let Tm (gensym (protect Tm)) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V2275) (cons V2276 ()))) (cons (cons if (cons (cons cons? (cons Tm ())) (cons (shen.compile-head shen.-m (cons (hd (tl (hd V2274))) (cons (hd (tl (tl (hd V2274)))) (tl V2274))) (cons (cons hd (cons Tm ())) (cons (cons tl (cons Tm ())) (tl V2275))) V2276 V2277) (cons false ())))) ())))))) (true (simple-error "implementation error in shen.cons-case-minus"))))

(defun shen.atom-case-plus (V2286 V2287 V2288 V2289) (cond ((and (cons? V2286) (cons? V2287)) (let Tm (gensym (protect Tm)) (let GoTo (gensym (protect GoTo)) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V2287) (cons V2288 ()))) (cons GoTo (cons (cons freeze (cons (shen.compile-head shen.+m (tl V2286) (tl V2287) V2288 V2289) ())) (cons (cons if (cons (cons = (cons Tm (cons (hd V2286) ()))) (cons (cons thaw (cons GoTo ())) (cons (cons if (cons (cons shen.pvar? (cons Tm ())) (cons (cons shen.bind! (cons Tm (cons (shen.demode (hd V2286)) (cons V2288 (cons GoTo ()))))) (cons false ())))) ())))) ()))))))))) (true (simple-error "implementation error in shen.atom-case-plus"))))

(defun shen.cons-case-plus (V2298 V2299 V2300 V2301) (cond ((and (cons? V2298) (and (cons? (hd V2298)) (and (= cons (hd (hd V2298))) (and (cons? (tl (hd V2298))) (and (cons? (tl (tl (hd V2298)))) (and (= () (tl (tl (tl (hd V2298))))) (cons? V2299))))))) (let Tm (gensym (protect Tm)) (let GoTo (gensym (protect GoTo)) (let Vars (shen.extract-vars (cons (hd (tl (hd V2298))) (hd (tl (tl (hd V2298)))))) (let Tame (shen.tame (hd V2298)) (let TVars (shen.extract-vars Tame) (cons let (cons Tm (cons (cons shen.lazyderef (cons (hd V2299) (cons V2300 ()))) (cons GoTo (cons (shen.goto Vars (shen.compile-head shen.+m (tl V2298) (tl V2299) V2300 V2301)) (cons (cons if (cons (cons cons? (cons Tm ())) (cons (shen.compile-head shen.+m (tl (hd V2298)) (cons (cons hd (cons Tm ())) (cons (cons tl (cons Tm ())) ())) V2300 (shen.invoke GoTo Vars)) (cons (cons if (cons (cons shen.pvar? (cons Tm ())) (cons (shen.stpart TVars (cons shen.bind! (cons Tm (cons (shen.demode Tame) (cons V2300 (cons (cons freeze (cons (shen.invoke GoTo Vars) ())) ()))))) V2300) (cons false ())))) ())))) ())))))))))))) (true (simple-error "implementation error in shen.cons-case-plus"))))

(defun shen.demode (V2302) (cond ((and (cons? V2302) (and (= shen.+m (hd V2302)) (and (cons? (tl V2302)) (= () (tl (tl V2302)))))) (shen.demode (hd (tl V2302)))) ((and (cons? V2302) (and (= shen.-m (hd V2302)) (and (cons? (tl V2302)) (= () (tl (tl V2302)))))) (shen.demode (hd (tl V2302)))) ((cons? V2302) (map (lambda Z (shen.demode Z)) V2302)) (true V2302)))

(defun shen.tame (V2303) (cond ((shen.wildcard? V2303) (gensym (protect Y))) ((cons? V2303) (map (lambda Z (shen.tame Z)) V2303)) (true V2303)))

(defun shen.goto (V2304 V2305) (cond ((= () V2304) (cons freeze (cons V2305 ()))) (true (shen.goto-h V2304 V2305))))

(defun shen.goto-h (V2306 V2307) (cond ((= () V2306) V2307) ((cons? V2306) (cons lambda (cons (hd V2306) (cons (shen.goto-h (tl V2306) V2307) ())))) (true (shen.f-error shen.goto-h))))

(defun shen.invoke (V2308 V2309) (cond ((= () V2309) (cons thaw (cons V2308 ()))) (true (cons V2308 V2309))))

(defun shen.wildcard? (V2310) (= V2310 _))

(defun shen.pvar? (V2311) (trap-error (and (absvector? V2311) (= (<-address V2311 0) shen.pvar)) (lambda E false)))

(defun shen.lazyderef (V2312 V2313) (if (shen.pvar? V2312) (let Value (<-address V2313 (<-address V2312 1)) (if (= Value shen.-null-) V2312 (shen.lazyderef Value V2313))) V2312))

(defun shen.deref (V2314 V2315) (cond ((cons? V2314) (cons (shen.deref (hd V2314) V2315) (shen.deref (tl V2314) V2315))) (true (if (shen.pvar? V2314) (let Value (<-address V2315 (<-address V2314 1)) (if (= Value shen.-null-) V2314 (shen.deref Value V2315))) V2314))))

(defun shen.bind! (V2316 V2317 V2318 V2319) (let Bind (shen.bindv V2316 V2317 V2318) (let Compute (thaw V2319) (if (= Compute false) (shen.unwind V2316 V2318 Compute) Compute))))

(defun shen.bindv (V2320 V2321 V2322) (address-> V2322 (<-address V2320 1) V2321))

(defun shen.unwind (V2323 V2324 V2325) (do (address-> V2324 (<-address V2323 1) shen.-null-) V2325))

(defun shen.stpart (V2334 V2335 V2336) (cond ((= () V2334) V2335) ((cons? V2334) (cons let (cons (hd V2334) (cons (cons shen.newpv (cons V2336 ())) (cons (cons shen.gc (cons V2336 (cons (shen.stpart (tl V2334) V2335 V2336) ()))) ()))))) (true (simple-error "implementation error in shen.stpart"))))

(defun shen.gc (V2337 V2338) (if (= V2338 false) (let N (shen.ticket-number V2337) (do (shen.decrement-ticket N V2337) V2338)) V2338))

(defun shen.decrement-ticket (V2339 V2340) (address-> V2340 1 (- V2339 1)))

(defun shen.newpv (V2341) (let N (shen.ticket-number V2341) (let NewBindings (shen.make-prolog-variable N) (let NextTicket (shen.nextticket V2341 N) NewBindings))))

(defun shen.ticket-number (V2342) (<-address V2342 1))

(defun shen.nextticket (V2343 V2344) (let NewVector (address-> V2343 V2344 shen.-null-) (address-> NewVector 1 (+ V2344 1))))

(defun shen.make-prolog-variable (V2345) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V2345))

(defun shen.pvar (V2346) (cn "Var" (shen.app (<-address V2346 1) "" shen.a)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.prolog-vector-size (V2347) (if (and (integer? V2347) (> V2347 0)) (set shen.*size-prolog-vector* V2347) (simple-error (cn "prolog vector size: size should be a positive integer; not " (shen.app V2347 "" shen.a)))))

(defun shen.lzy=! (V2359 V2360 V2361 V2362) (cond ((= V2359 V2360) (thaw V2362)) ((and (shen.pvar? V2359) (not (shen.occurs? V2359 (shen.deref V2360 V2361)))) (shen.bind! V2359 V2360 V2361 V2362)) ((and (shen.pvar? V2360) (not (shen.occurs? V2360 (shen.deref V2359 V2361)))) (shen.bind! V2360 V2359 V2361 V2362)) ((and (cons? V2359) (cons? V2360)) (shen.lzy=! (shen.lazyderef (hd V2359) V2361) (shen.lazyderef (hd V2360) V2361) V2361 (freeze (shen.lzy=! (shen.lazyderef (tl V2359) V2361) (shen.lazyderef (tl V2360) V2361) V2361 V2362)))) (true false)))

(defun shen.lzy= (V2374 V2375 V2376 V2377) (cond ((= V2374 V2375) (thaw V2377)) ((shen.pvar? V2374) (shen.bind! V2374 V2375 V2376 V2377)) ((shen.pvar? V2375) (shen.bind! V2375 V2374 V2376 V2377)) ((and (cons? V2374) (cons? V2375)) (shen.lzy= (shen.lazyderef (hd V2374) V2376) (shen.lazyderef (hd V2375) V2376) V2376 (freeze (shen.lzy= (shen.lazyderef (tl V2374) V2376) (shen.lazyderef (tl V2375) V2376) V2376 V2377)))) (true false)))

(defun shen.occurs? (V2383 V2384) (cond ((= V2383 V2384) true) ((cons? V2384) (or (shen.occurs? V2383 (hd V2384)) (shen.occurs? V2383 (tl V2384)))) (true false)))

(defun call (V2385 V2386 V2387 V2388 V2389) ((((V2385 V2386) V2387) V2388) V2389))

(defun return (V2396 V2397 V2398 V2399 V2400) (shen.deref V2396 V2397))

(defun when (V2407 V2408 V2409 V2410 V2411) (if V2407 (thaw V2411) false))

(defun is (V2412 V2413 V2414 V2415 V2416 V2417) (shen.lzy= (shen.lazyderef V2412 V2414) (shen.lazyderef V2413 V2414) V2414 V2417))

(defun is! (V2418 V2419 V2420 V2421 V2422 V2423) (shen.lzy=! (shen.lazyderef V2418 V2420) (shen.lazyderef V2419 V2420) V2420 V2423))

(defun bind (V2428 V2429 V2430 V2431 V2432 V2433) (shen.bind! V2428 V2429 V2430 V2433))

(defun var? (V2434 V2435 V2436 V2437 V2438) (if (shen.pvar? (shen.lazyderef V2434 V2435)) (thaw V2438) false))

(defun shen.print-prolog-vector (V2441) "|prolog vector|")

(defun fork (V2460 V2461 V2462 V2463 V2464) (cond ((= () V2460) false) ((cons? V2460) (let Case (((((hd V2460) V2461) V2462) V2463) V2464) (if (= Case false) (fork (tl V2460) V2461 V2462 V2463 V2464) Case))) (true (simple-error "fork expects a list of literals
"))))

(defun findall (V2465 V2466 V2467 V2468 V2469 V2470 V2471) (if (shen.unlocked? V2469) (let Store (shen.newpv V2468) (shen.gc V2468 (do (shen.incinfs) (is Store () V2468 V2469 V2470 (freeze (shen.findall-h V2465 V2466 V2467 Store V2468 V2469 V2470 V2471)))))) false))

(defun shen.findall-h (V2472 V2473 V2474 V2475 V2476 V2477 V2478 V2479) (let C1896 (if (shen.unlocked? V2477) (do (shen.incinfs) (call V2473 V2476 V2477 V2478 (freeze (shen.overbind V2472 V2475 V2476 V2477 V2478 V2479)))) false) (if (= C1896 false) (if (shen.unlocked? V2477) (do (shen.incinfs) (is! V2474 V2475 V2476 V2477 V2478 V2479)) false) C1896)))

(defun shen.overbind (V2486 V2487 V2488 V2489 V2490 V2491) (do (shen.bindv V2487 (cons (shen.deref V2486 V2488) (shen.lazyderef V2487 V2488)) V2488) false))

(defun occurs-check (V2494) (cond ((= + V2494) (set shen.*occurs* true)) ((= - V2494) (set shen.*occurs* false)) (true (simple-error "occurs-check expects a + or a -.
"))))
