(defun load (V1706) (let TC? (value shen.*tc*) (let Load (let Start (get-time run) (let Result (shen.load-help TC? (read-file V1706)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (pr (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if TC? (pr (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded))))

(defun shen.load-help (V1709 V1710) (cond ((= false V1709) (shen.eval-and-print V1710)) (true (shen.check-eval-and-print V1710))))

(defun shen.eval-and-print (V1711) (map (lambda Y (pr (shen.app (eval-kl (shen.shen->kl Y)) "
" shen.s) (stoutput))) V1711))

(defun shen.check-eval-and-print (V1712) (let Table (mapcan (lambda Y (shen.typetable Y)) V1712) (let Assume (shen.assumetypes Table) (trap-error (shen.work-through V1712) (lambda E (shen.unwind-types E Table))))))

(defun shen.typetable (V1717) (cond ((and (cons? V1717) (and (= define (hd V1717)) (and (cons? (tl V1717)) (and (cons? (tl (tl V1717))) (= { (hd (tl (tl V1717)))))))) (cons (hd (tl V1717)) (cons (shen.rectify-type (shen.type-F (hd (tl V1717)) (tl (tl (tl V1717))))) ()))) ((and (cons? V1717) (and (= define (hd V1717)) (cons? (tl V1717)))) (simple-error (cn "missing { in " (shen.app (hd (tl V1717)) "
" shen.a)))) (true ())))

(defun shen.type-F (V1724 V1725) (cond ((and (cons? V1725) (= } (hd V1725))) ()) ((cons? V1725) (cons (hd V1725) (shen.type-F V1724 (tl V1725)))) (true (simple-error (cn "missing } in " (shen.app V1724 "
" shen.a))))))

(defun shen.assumetypes (V1728) (cond ((= () V1728) ()) ((and (cons? V1728) (cons? (tl V1728))) (do (declare (hd V1728) (hd (tl V1728))) (shen.assumetypes (tl (tl V1728))))) (true (simple-error "implementation error in shen.assumetype"))))

(defun shen.unwind-types (V1733 V1734) (cond ((and (cons? V1734) (cons? (hd V1734))) (do (destroy (hd (hd V1734))) (shen.unwind-types V1733 (tl V1734)))) (true (simple-error (error-to-string V1733)))))

(defun shen.work-through (V1737) (cond ((= () V1737) ()) ((and (cons? V1737) (and (cons? (tl V1737)) (and (cons? (tl (tl V1737))) (= (hd (tl V1737)) (intern ":"))))) (let Check (shen.typecheck (hd V1737) (hd (tl (tl V1737)))) (if (= Check false) (shen.type-error) (let Eval (eval-kl (shen.shen->kl (hd V1737))) (let Message (pr (shen.app Eval (cn " : " (shen.app (shen.pretty-type Check) "
" shen.r)) shen.s) (stoutput)) (shen.work-through (tl (tl (tl V1737))))))))) ((cons? V1737) (shen.work-through (cons (hd V1737) (cons (intern ":") (cons (protect A) (tl V1737)))))) (true (simple-error "implementation error in shen.work-through"))))

(defun shen.pretty-type (V1739) (cond ((and (cons? V1739) (and (cons? (hd V1739)) (and (= str (hd (hd V1739))) (and (cons? (tl (hd V1739))) (and (cons? (hd (tl (hd V1739)))) (and (= list (hd (hd (tl (hd V1739))))) (and (cons? (tl (hd (tl (hd V1739))))) (and (= () (tl (tl (hd (tl (hd V1739)))))) (and (cons? (tl (tl (hd V1739)))) (and (= () (tl (tl (tl (hd V1739))))) (and (cons? (tl V1739)) (and (= --> (hd (tl V1739))) (and (cons? (tl (tl V1739))) (and (cons? (hd (tl (tl V1739)))) (and (= str (hd (hd (tl (tl V1739))))) (and (cons? (tl (hd (tl (tl V1739))))) (and (cons? (hd (tl (hd (tl (tl V1739)))))) (and (= list (hd (hd (tl (hd (tl (tl V1739))))))) (and (cons? (tl (hd (tl (hd (tl (tl V1739))))))) (and (= () (tl (tl (hd (tl (hd (tl (tl V1739)))))))) (and (cons? (tl (tl (hd (tl (tl V1739)))))) (and (= () (tl (tl (tl (hd (tl (tl V1739))))))) (and (= () (tl (tl (tl V1739)))) (= (hd (tl (hd (tl (hd V1739))))) (hd (tl (hd (tl (hd (tl (tl V1739))))))))))))))))))))))))))))))) (cons (hd (tl (hd (tl (tl V1739))))) (cons ==> (tl (tl (hd (tl (tl V1739)))))))) (true V1739)))

(defun shen.type-error () (simple-error "type error
"))

(defun bootstrap (V1740) (let KLFile (shen.klfile V1740) (let Code (read-file V1740) (let Open (open KLFile out) (let KL (map (lambda X (shen.shen->kl-h X)) Code) (let Write (shen.write-kl KL Open) KLFile))))))

(defun shen.write-kl (V1743 V1744) (cond ((= () V1743) (close V1744)) ((and (cons? V1743) (cons? (hd V1743))) (shen.write-kl (tl V1743) (do (shen.write-kl-h (hd V1743) V1744) V1744))) ((cons? V1743) (shen.write-kl (tl V1743) V1744)) (true (shen.f-error shen.write-kl))))

(defun shen.write-kl-h (V1747 V1748) (cond ((and (cons? V1747) (and (= defun (hd V1747)) (and (cons? (tl V1747)) (and (= fail (hd (tl V1747))) (and (cons? (tl (tl V1747))) (and (= () (hd (tl (tl V1747)))) (and (cons? (tl (tl (tl V1747)))) (= () (tl (tl (tl (tl V1747)))))))))))) (pr "(defun fail () shen.fail!)" V1748)) (true (pr (shen.app V1747 "

" shen.r) V1748))))

(defun shen.klfile (V1749) (cond ((= "" V1749) ".kl") ((= ".shen" V1749) ".kl") ((shen.+string? V1749) (@s (hdstr V1749) (shen.klfile (tlstr V1749)))) (true (shen.f-error shen.klfile))))
