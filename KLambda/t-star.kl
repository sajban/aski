(defun shen.typecheck (V9357 V9358) (let Vs (shen.extract-vars V9358) (let A* (shen.rectify-type V9358) (let Curried (shen.curry V9357) (((((lambda V8771 (lambda L8772 (lambda K8773 (lambda C8774 (let Out (shen.newpv V8771) (shen.gc V8771 (do (shen.incinfs) (shen.insert-prolog-variables (receive (shen.deref Vs V8771)) (receive (shen.deref A* V8771)) Out V8771 L8772 K8773 (freeze (shen.toplevel-forms (receive (shen.deref Curried V8771)) Out V8771 L8772 K8773 (freeze (return Out V8771 L8772 K8773 C8774)))))))))))) (shen.reset-prolog-vector)) (@v true (@v 0 (vector 0)))) 0) (freeze true))))))

(defun shen.insert-prolog-variables (V9359 V9360 V9361 V9362 V9363 V9364 V9365) (let C8783 (if (shen.unlocked? V9363) (let Tm8784 (shen.lazyderef V9359 V9362) (if (= Tm8784 ()) (do (shen.incinfs) (is! V9360 V9361 V9362 V9363 V9364 V9365)) false)) false) (if (= C8783 false) (if (shen.unlocked? V9363) (let Tm8785 (shen.lazyderef V9359 V9362) (if (cons? Tm8785) (let V (hd Tm8785) (let Vs (tl Tm8785) (let X (shen.newpv V9362) (shen.gc V9362 (do (shen.incinfs) (shen.insert-prolog-variables Vs (subst (shen.deref X V9362) V V9360) V9361 V9362 V9363 V9364 V9365)))))) false)) false) C8783)))

(defun shen.toplevel-forms (V9366 V9367 V9368 V9369 V9370 V9371) (let K8788 (+ V9370 1) (let C8792 (if (shen.unlocked? V9369) (let Tm8793 (shen.lazyderef V9366 V9368) (if (cons? Tm8793) (let Tm8794 (shen.lazyderef (hd Tm8793) V9368) (if (= Tm8794 define) (let Tm8795 (shen.lazyderef (tl Tm8793) V9368) (if (cons? Tm8795) (let F (hd Tm8795) (let X (tl Tm8795) (do (shen.incinfs) (when (shen.type-theory-enabled?) V9368 V9369 K8788 (freeze (shen.cut V9368 V9369 K8788 (freeze (shen.signal-def (value shen.*spy*) F V9368 V9369 K8788 (freeze (shen.t* (cons define (cons F X)) V9367 V9368 V9369 K8788 V9371)))))))))) false)) false)) false)) false) (if (= C8792 false) (let C8796 (if (shen.unlocked? V9369) (do (shen.incinfs) (shen.system-S (cons V9366 (cons (intern ":") (cons V9367 ()))) () V9368 V9369 K8788 V9371)) false) (if (= C8796 false) (shen.unlock V9369 K8788) C8796)) C8792))))

(defun shen.signal-def (V9372 V9373 V9374 V9375 V9376 V9377) (let C8803 (if (shen.unlocked? V9375) (let Tm8804 (shen.lazyderef V9372 V9374) (if (= Tm8804 false) (do (shen.incinfs) (thaw V9377)) false)) false) (if (= C8803 false) (if (shen.unlocked? V9375) (let Tm8805 (shen.lazyderef V9372 V9374) (if (= Tm8805 true) (let ShowF (shen.newpv V9374) (shen.gc V9374 (do (shen.incinfs) (is ShowF (pr (cn "
typechecking (fn " (shen.app (shen.deref V9373 V9374) ")
" shen.a)) (stoutput)) V9374 V9375 V9376 V9377)))) false)) false) C8803)))

(defun shen.rectify-type (V9378) (shen.demodulate (shen.curry-type V9378)))

(defun shen.demodulate (V9379) (trap-error (let Demod (shen.walk (lambda Y (shen.demod Y)) V9379) (if (= Demod V9379) V9379 (shen.demodulate Demod))) (lambda E V9379)))

(defun shen.curry-type (V9380) (cond ((and (cons? V9380) (and (cons? (tl V9380)) (and (= --> (hd (tl V9380))) (and (cons? (tl (tl V9380))) (and (cons? (tl (tl (tl V9380)))) (= --> (hd (tl (tl (tl V9380)))))))))) (shen.curry-type (cons (hd V9380) (cons --> (cons (tl (tl V9380)) ()))))) ((and (cons? V9380) (and (cons? (tl V9380)) (and (= ==> (hd (tl V9380))) (and (cons? (tl (tl V9380))) (= () (tl (tl (tl V9380)))))))) (shen.curry-type (cons (cons (hd V9380) (cons * (cons A ()))) (cons --> (cons (cons (cons vector (cons boolean ())) (cons --> (cons (cons (hd V9380) (cons * (tl (tl V9380)))) ()))) ()))))) ((and (cons? V9380) (and (cons? (tl V9380)) (and (= * (hd (tl V9380))) (and (cons? (tl (tl V9380))) (and (cons? (tl (tl (tl V9380)))) (= * (hd (tl (tl (tl V9380)))))))))) (shen.curry-type (cons (hd V9380) (cons * (cons (tl (tl V9380)) ()))))) ((cons? V9380) (map (lambda Z (shen.curry-type Z)) V9380)) (true V9380)))

(defun shen.curry (V9381) (cond ((and (cons? V9381) (and (= define (hd V9381)) (cons? (tl V9381)))) V9381) ((and (cons? V9381) (and (= type (hd V9381)) (and (cons? (tl V9381)) (and (cons? (tl (tl V9381))) (= () (tl (tl (tl V9381)))))))) (cons type (cons (shen.curry (hd (tl V9381))) (tl (tl V9381))))) ((and (cons? V9381) (and (= input+ (hd V9381)) (and (cons? (tl V9381)) (and (cons? (tl (tl V9381))) (= () (tl (tl (tl V9381)))))))) (cons input+ (cons (hd (tl V9381)) (cons (shen.curry (hd (tl (tl V9381)))) ())))) ((and (cons? V9381) (shen.special? (hd V9381))) (cons (hd V9381) (map (lambda Y (shen.curry Y)) (tl V9381)))) ((and (cons? V9381) (shen.extraspecial? (hd V9381))) V9381) ((and (cons? V9381) (and (cons? (tl V9381)) (cons? (tl (tl V9381))))) (shen.curry (cons (cons (hd V9381) (cons (hd (tl V9381)) ())) (tl (tl V9381))))) ((and (cons? V9381) (and (cons? (tl V9381)) (= () (tl (tl V9381))))) (cons (shen.curry (hd V9381)) (cons (shen.curry (hd (tl V9381))) ()))) (true V9381)))

(defun shen.special? (V9382) (element? V9382 (value shen.*special*)))

(defun shen.extraspecial? (V9383) (element? V9383 (value shen.*extraspecial*)))

(defun shen.system-S (V9384 V9385 V9386 V9387 V9388 V9389) (let K8808 (+ V9388 1) (let C8812 (if (shen.unlocked? V9387) (do (shen.incinfs) (when (shen.maxinfexceeded?) V9386 V9387 K8808 V9389)) false) (if (= C8812 false) (let C8813 (if (shen.unlocked? V9387) (let Tm8814 (shen.lazyderef V9384 V9386) (if (cons? Tm8814) (let X (hd Tm8814) (let Tm8815 (shen.lazyderef (tl Tm8814) V9386) (if (cons? Tm8815) (let Colon (hd Tm8815) (let Tm8816 (shen.lazyderef (tl Tm8815) V9386) (if (cons? Tm8816) (let A (hd Tm8816) (let Tm8817 (shen.lazyderef (tl Tm8816) V9386) (if (= Tm8817 ()) (do (shen.incinfs) (when (= (shen.deref Colon V9386) (intern ":")) V9386 V9387 K8808 (freeze (when (shen.type-theory-enabled?) V9386 V9387 K8808 (freeze (shen.cut V9386 V9387 K8808 (freeze (shen.system-S-h X A V9385 V9386 V9387 K8808 V9389)))))))) false))) false))) false))) false)) false) (if (= C8813 false) (let C8818 (if (shen.unlocked? V9387) (do (shen.incinfs) (when (value shen.*spy*) V9386 V9387 K8808 (freeze (shen.show V9384 V9385 V9386 V9387 K8808 V9389)))) false) (if (= C8818 false) (let C8819 (if (shen.unlocked? V9387) (do (shen.incinfs) (shen.search-user-datatypes V9384 V9385 (value shen.*datatypes*) V9386 V9387 K8808 V9389)) false) (if (= C8819 false) (shen.unlock V9387 K8808) C8819)) C8818)) C8813)) C8812))))

(defun shen.show (V9396 V9397 V9398 V9399 V9400 V9401) (do (shen.line) (do (shen.show-p (shen.deref V9396 V9398)) (do (nl 2) (do (shen.show-assumptions (shen.deref V9397 V9398) 1) (do (shen.pause-for-user) false))))))

(defun shen.line () (let Infs (inferences) (pr (cn "____________________________________________________________ " (shen.app Infs (cn " inference" (shen.app (if (= 1 Infs) "" "s") " 
?- " shen.a)) shen.a)) (stoutput))))

(defun shen.show-p (V9402) (cond ((and (cons? V9402) (and (cons? (tl V9402)) (and (cons? (tl (tl V9402))) (and (= () (tl (tl (tl V9402)))) (= (hd (tl V9402)) (intern ":")))))) (do (shen.prterm (hd V9402)) (do (pr " : " (stoutput)) (pr (shen.app (hd (tl (tl V9402))) "" shen.r) (stoutput))))) (true (shen.prterm V9402))))

(defun shen.prterm (V9403) (cond ((and (cons? V9403) (and (= cons (hd V9403)) (and (cons? (tl V9403)) (and (cons? (tl (tl V9403))) (= () (tl (tl (tl V9403)))))))) (do (pr "[" (stoutput)) (do (shen.prterm (hd (tl V9403))) (do (shen.prtl (hd (tl (tl V9403)))) (pr "]" (stoutput)))))) ((cons? V9403) (do (pr "(" (stoutput)) (do (shen.prterm (hd V9403)) (do (map (lambda Y (do (pr " " (stoutput)) (shen.prterm Y))) (tl V9403)) (pr ")" (stoutput)))))) (true (print V9403))))

(defun shen.prtl (V9404) (cond ((= () V9404) "") ((and (cons? V9404) (and (= cons (hd V9404)) (and (cons? (tl V9404)) (and (cons? (tl (tl V9404))) (= () (tl (tl (tl V9404)))))))) (do (pr " " (stoutput)) (do (shen.prterm (hd (tl V9404))) (shen.prtl (hd (tl (tl V9404))))))) (true (do (pr " | " (stoutput)) (shen.prterm V9404)))))

(defun shen.show-assumptions (V9411 V9412) (cond ((= () V9411) (pr "
> " (stoutput))) ((cons? V9411) (do (pr (shen.app V9412 ". " shen.a) (stoutput)) (do (shen.show-p (hd V9411)) (do (nl 1) (shen.show-assumptions (tl V9411) (+ V9412 1)))))) (true (simple-error "implementation error in shen.show-assumptions"))))

(defun shen.pause-for-user () (let Byte (read-byte (stinput)) (if (= Byte 94) (simple-error "input aborted
") (nl 1))))

(defun shen.type-theory-enabled? () (value shen.*shen-type-theory-enabled?*))

(defun shen.maxinfexceeded? () (if (> (inferences) (value shen.*maxinferences*)) (simple-error "maximum inferences exceeded") false))

(defun shen.system-S-h (V9413 V9414 V9415 V9416 V9417 V9418 V9419) (let K8823 (+ V9418 1) (let C8828 (if (shen.unlocked? V9417) (do (shen.incinfs) (when (value shen.*spy*) V9416 V9417 K8823 (freeze (shen.show (cons V9413 (cons (intern ":") (cons V9414 ()))) V9415 V9416 V9417 K8823 V9419)))) false) (if (= C8828 false) (let C8829 (if (shen.unlocked? V9417) (do (shen.incinfs) (when (not (cons? (shen.lazyderef V9413 V9416))) V9416 V9417 K8823 (freeze (shen.primitive V9413 V9414 V9416 V9417 K8823 V9419)))) false) (if (= C8829 false) (let C8830 (if (shen.unlocked? V9417) (do (shen.incinfs) (shen.by-hypothesis V9413 V9414 V9415 V9416 V9417 K8823 V9419)) false) (if (= C8830 false) (let C8831 (if (shen.unlocked? V9417) (let Tm8832 (shen.lazyderef V9413 V9416) (if (cons? Tm8832) (let F (hd Tm8832) (let Tm8833 (shen.lazyderef (tl Tm8832) V9416) (if (= Tm8833 ()) (do (shen.incinfs) (shen.lookupsig F (cons --> (cons V9414 ())) V9416 V9417 K8823 V9419)) false))) false)) false) (if (= C8831 false) (let C8834 (if (shen.unlocked? V9417) (let Tm8835 (shen.lazyderef V9413 V9416) (if (cons? Tm8835) (let Tm8836 (shen.lazyderef (hd Tm8835) V9416) (if (= Tm8836 fn) (let Tm8837 (shen.lazyderef (tl Tm8835) V9416) (if (cons? Tm8837) (let F (hd Tm8837) (let Tm8838 (shen.lazyderef (tl Tm8837) V9416) (if (= Tm8838 ()) (do (shen.incinfs) (shen.lookupsig F V9414 V9416 V9417 K8823 V9419)) false))) false)) false)) false)) false) (if (= C8834 false) (let C8839 (if (shen.unlocked? V9417) (let Tm8840 (shen.lazyderef V9413 V9416) (if (cons? Tm8840) (let F (hd Tm8840) (let Tm8841 (shen.lazyderef (tl Tm8840) V9416) (if (cons? Tm8841) (let X (hd Tm8841) (let Tm8842 (shen.lazyderef (tl Tm8841) V9416) (if (= Tm8842 ()) (let B (shen.newpv V9416) (shen.gc V9416 (do (shen.incinfs) (when (not (cons? (shen.lazyderef F V9416))) V9416 V9417 K8823 (freeze (shen.lookupsig F (cons B (cons --> (cons V9414 ()))) V9416 V9417 K8823 (freeze (shen.system-S-h X B V9415 V9416 V9417 K8823 V9419)))))))) false))) false))) false)) false) (if (= C8839 false) (let C8843 (if (shen.unlocked? V9417) (let Tm8844 (shen.lazyderef V9413 V9416) (if (cons? Tm8844) (let F (hd Tm8844) (let Tm8845 (shen.lazyderef (tl Tm8844) V9416) (if (cons? Tm8845) (let X (hd Tm8845) (let Tm8846 (shen.lazyderef (tl Tm8845) V9416) (if (= Tm8846 ()) (let B (shen.newpv V9416) (shen.gc V9416 (do (shen.incinfs) (shen.system-S-h F (cons B (cons --> (cons V9414 ()))) V9415 V9416 V9417 K8823 (freeze (shen.system-S-h X B V9415 V9416 V9417 K8823 V9419)))))) false))) false))) false)) false) (if (= C8843 false) (let C8847 (if (shen.unlocked? V9417) (let Tm8848 (shen.lazyderef V9413 V9416) (if (cons? Tm8848) (let Tm8849 (shen.lazyderef (hd Tm8848) V9416) (if (= Tm8849 cons) (let Tm8850 (shen.lazyderef (tl Tm8848) V9416) (if (cons? Tm8850) (let X (hd Tm8850) (let Tm8851 (shen.lazyderef (tl Tm8850) V9416) (if (cons? Tm8851) (let Y (hd Tm8851) (let Tm8852 (shen.lazyderef (tl Tm8851) V9416) (if (= Tm8852 ()) (let Tm8853 (shen.lazyderef V9414 V9416) (let GoTo8854 (lambda A (do (shen.incinfs) (shen.system-S-h X A V9415 V9416 V9417 K8823 (freeze (shen.system-S-h Y (cons list (cons A ())) V9415 V9416 V9417 K8823 V9419))))) (if (cons? Tm8853) (let Tm8855 (shen.lazyderef (hd Tm8853) V9416) (let GoTo8856 (freeze (let Tm8857 (shen.lazyderef (tl Tm8853) V9416) (let GoTo8858 (lambda A (GoTo8854 A)) (if (cons? Tm8857) (let A (hd Tm8857) (let Tm8859 (shen.lazyderef (tl Tm8857) V9416) (let GoTo8860 (freeze (GoTo8858 A)) (if (= Tm8859 ()) (thaw GoTo8860) (if (shen.pvar? Tm8859) (shen.bind! Tm8859 () V9416 GoTo8860) false))))) (if (shen.pvar? Tm8857) (let A (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8857 (cons A ()) V9416 (freeze (GoTo8858 A))))) false))))) (if (= Tm8855 list) (thaw GoTo8856) (if (shen.pvar? Tm8855) (shen.bind! Tm8855 list V9416 GoTo8856) false)))) (if (shen.pvar? Tm8853) (let A (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8853 (cons list (cons A ())) V9416 (freeze (GoTo8854 A))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8847 false) (let C8861 (if (shen.unlocked? V9417) (let Tm8862 (shen.lazyderef V9413 V9416) (if (cons? Tm8862) (let Tm8863 (shen.lazyderef (hd Tm8862) V9416) (if (= Tm8863 @p) (let Tm8864 (shen.lazyderef (tl Tm8862) V9416) (if (cons? Tm8864) (let X (hd Tm8864) (let Tm8865 (shen.lazyderef (tl Tm8864) V9416) (if (cons? Tm8865) (let Y (hd Tm8865) (let Tm8866 (shen.lazyderef (tl Tm8865) V9416) (if (= Tm8866 ()) (let Tm8867 (shen.lazyderef V9414 V9416) (let GoTo8868 (lambda A (lambda B (do (shen.incinfs) (shen.system-S-h X A V9415 V9416 V9417 K8823 (freeze (shen.system-S-h Y B V9415 V9416 V9417 K8823 V9419)))))) (if (cons? Tm8867) (let A (hd Tm8867) (let Tm8869 (shen.lazyderef (tl Tm8867) V9416) (let GoTo8870 (lambda B ((GoTo8868 A) B)) (if (cons? Tm8869) (let Tm8871 (shen.lazyderef (hd Tm8869) V9416) (let GoTo8872 (freeze (let Tm8873 (shen.lazyderef (tl Tm8869) V9416) (let GoTo8874 (lambda B (GoTo8870 B)) (if (cons? Tm8873) (let B (hd Tm8873) (let Tm8875 (shen.lazyderef (tl Tm8873) V9416) (let GoTo8876 (freeze (GoTo8874 B)) (if (= Tm8875 ()) (thaw GoTo8876) (if (shen.pvar? Tm8875) (shen.bind! Tm8875 () V9416 GoTo8876) false))))) (if (shen.pvar? Tm8873) (let B (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8873 (cons B ()) V9416 (freeze (GoTo8874 B))))) false))))) (if (= Tm8871 *) (thaw GoTo8872) (if (shen.pvar? Tm8871) (shen.bind! Tm8871 * V9416 GoTo8872) false)))) (if (shen.pvar? Tm8869) (let B (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8869 (cons * (cons B ())) V9416 (freeze (GoTo8870 B))))) false))))) (if (shen.pvar? Tm8867) (let A (shen.newpv V9416) (shen.gc V9416 (let B (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8867 (cons A (cons * (cons B ()))) V9416 (freeze ((GoTo8868 A) B))))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8861 false) (let C8877 (if (shen.unlocked? V9417) (let Tm8878 (shen.lazyderef V9413 V9416) (if (cons? Tm8878) (let Tm8879 (shen.lazyderef (hd Tm8878) V9416) (if (= Tm8879 @v) (let Tm8880 (shen.lazyderef (tl Tm8878) V9416) (if (cons? Tm8880) (let X (hd Tm8880) (let Tm8881 (shen.lazyderef (tl Tm8880) V9416) (if (cons? Tm8881) (let Y (hd Tm8881) (let Tm8882 (shen.lazyderef (tl Tm8881) V9416) (if (= Tm8882 ()) (let Tm8883 (shen.lazyderef V9414 V9416) (let GoTo8884 (lambda A (do (shen.incinfs) (shen.system-S-h X A V9415 V9416 V9417 K8823 (freeze (shen.system-S-h Y (cons vector (cons A ())) V9415 V9416 V9417 K8823 V9419))))) (if (cons? Tm8883) (let Tm8885 (shen.lazyderef (hd Tm8883) V9416) (let GoTo8886 (freeze (let Tm8887 (shen.lazyderef (tl Tm8883) V9416) (let GoTo8888 (lambda A (GoTo8884 A)) (if (cons? Tm8887) (let A (hd Tm8887) (let Tm8889 (shen.lazyderef (tl Tm8887) V9416) (let GoTo8890 (freeze (GoTo8888 A)) (if (= Tm8889 ()) (thaw GoTo8890) (if (shen.pvar? Tm8889) (shen.bind! Tm8889 () V9416 GoTo8890) false))))) (if (shen.pvar? Tm8887) (let A (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8887 (cons A ()) V9416 (freeze (GoTo8888 A))))) false))))) (if (= Tm8885 vector) (thaw GoTo8886) (if (shen.pvar? Tm8885) (shen.bind! Tm8885 vector V9416 GoTo8886) false)))) (if (shen.pvar? Tm8883) (let A (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8883 (cons vector (cons A ())) V9416 (freeze (GoTo8884 A))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8877 false) (let C8891 (if (shen.unlocked? V9417) (let Tm8892 (shen.lazyderef V9413 V9416) (if (cons? Tm8892) (let Tm8893 (shen.lazyderef (hd Tm8892) V9416) (if (= Tm8893 @s) (let Tm8894 (shen.lazyderef (tl Tm8892) V9416) (if (cons? Tm8894) (let X (hd Tm8894) (let Tm8895 (shen.lazyderef (tl Tm8894) V9416) (if (cons? Tm8895) (let Y (hd Tm8895) (let Tm8896 (shen.lazyderef (tl Tm8895) V9416) (if (= Tm8896 ()) (let Tm8897 (shen.lazyderef V9414 V9416) (let GoTo8898 (freeze (do (shen.incinfs) (shen.system-S-h X string V9415 V9416 V9417 K8823 (freeze (shen.system-S-h Y string V9415 V9416 V9417 K8823 V9419))))) (if (= Tm8897 string) (thaw GoTo8898) (if (shen.pvar? Tm8897) (shen.bind! Tm8897 string V9416 GoTo8898) false)))) false))) false))) false)) false)) false)) false) (if (= C8891 false) (let C8899 (if (shen.unlocked? V9417) (let Tm8900 (shen.lazyderef V9413 V9416) (if (cons? Tm8900) (let Tm8901 (shen.lazyderef (hd Tm8900) V9416) (if (= Tm8901 lambda) (let Tm8902 (shen.lazyderef (tl Tm8900) V9416) (if (cons? Tm8902) (let X (hd Tm8902) (let Tm8903 (shen.lazyderef (tl Tm8902) V9416) (if (cons? Tm8903) (let Y (hd Tm8903) (let Tm8904 (shen.lazyderef (tl Tm8903) V9416) (if (= Tm8904 ()) (let Tm8905 (shen.lazyderef V9414 V9416) (let GoTo8906 (lambda A (lambda B (let Z (shen.newpv V9416) (shen.gc V9416 (let New (shen.newpv V9416) (shen.gc V9416 (do (shen.incinfs) (bind New (shen.freshterm (shen.lazyderef X V9416)) V9416 V9417 K8823 (freeze (bind Z (shen.beta (shen.lazyderef X V9416) (shen.deref New V9416) (shen.deref Y V9416)) V9416 V9417 K8823 (freeze (shen.system-S-h Z B (cons (cons New (cons (intern ":") (cons A ()))) V9415) V9416 V9417 K8823 V9419)))))))))))) (if (cons? Tm8905) (let A (hd Tm8905) (let Tm8907 (shen.lazyderef (tl Tm8905) V9416) (let GoTo8908 (lambda B ((GoTo8906 A) B)) (if (cons? Tm8907) (let Tm8909 (shen.lazyderef (hd Tm8907) V9416) (let GoTo8910 (freeze (let Tm8911 (shen.lazyderef (tl Tm8907) V9416) (let GoTo8912 (lambda B (GoTo8908 B)) (if (cons? Tm8911) (let B (hd Tm8911) (let Tm8913 (shen.lazyderef (tl Tm8911) V9416) (let GoTo8914 (freeze (GoTo8912 B)) (if (= Tm8913 ()) (thaw GoTo8914) (if (shen.pvar? Tm8913) (shen.bind! Tm8913 () V9416 GoTo8914) false))))) (if (shen.pvar? Tm8911) (let B (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8911 (cons B ()) V9416 (freeze (GoTo8912 B))))) false))))) (if (= Tm8909 -->) (thaw GoTo8910) (if (shen.pvar? Tm8909) (shen.bind! Tm8909 --> V9416 GoTo8910) false)))) (if (shen.pvar? Tm8907) (let B (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8907 (cons --> (cons B ())) V9416 (freeze (GoTo8908 B))))) false))))) (if (shen.pvar? Tm8905) (let A (shen.newpv V9416) (shen.gc V9416 (let B (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8905 (cons A (cons --> (cons B ()))) V9416 (freeze ((GoTo8906 A) B))))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8899 false) (let C8915 (if (shen.unlocked? V9417) (let Tm8916 (shen.lazyderef V9413 V9416) (if (cons? Tm8916) (let Tm8917 (shen.lazyderef (hd Tm8916) V9416) (if (= Tm8917 let) (let Tm8918 (shen.lazyderef (tl Tm8916) V9416) (if (cons? Tm8918) (let X (hd Tm8918) (let Tm8919 (shen.lazyderef (tl Tm8918) V9416) (if (cons? Tm8919) (let Y (hd Tm8919) (let Tm8920 (shen.lazyderef (tl Tm8919) V9416) (if (cons? Tm8920) (let Z (hd Tm8920) (let Tm8921 (shen.lazyderef (tl Tm8920) V9416) (if (= Tm8921 ()) (let W (shen.newpv V9416) (shen.gc V9416 (let New (shen.newpv V9416) (shen.gc V9416 (let B (shen.newpv V9416) (shen.gc V9416 (do (shen.incinfs) (shen.system-S-h Y B V9415 V9416 V9417 K8823 (freeze (bind New (shen.freshterm (shen.lazyderef X V9416)) V9416 V9417 K8823 (freeze (bind W (shen.beta (shen.lazyderef X V9416) (shen.lazyderef New V9416) (shen.lazyderef Z V9416)) V9416 V9417 K8823 (freeze (shen.system-S-h W V9414 (cons (cons New (cons (intern ":") (cons B ()))) V9415) V9416 V9417 K8823 V9419)))))))))))))) false))) false))) false))) false)) false)) false)) false) (if (= C8915 false) (let C8922 (if (shen.unlocked? V9417) (let Tm8923 (shen.lazyderef V9413 V9416) (if (cons? Tm8923) (let Tm8924 (shen.lazyderef (hd Tm8923) V9416) (if (= Tm8924 open) (let Tm8925 (shen.lazyderef (tl Tm8923) V9416) (if (cons? Tm8925) (let File (hd Tm8925) (let Tm8926 (shen.lazyderef (tl Tm8925) V9416) (if (cons? Tm8926) (let V8820 (hd Tm8926) (let Tm8927 (shen.lazyderef (tl Tm8926) V9416) (if (= Tm8927 ()) (let Tm8928 (shen.lazyderef V9414 V9416) (let GoTo8929 (lambda D (do (shen.incinfs) (is! V8820 D V9416 V9417 K8823 (freeze (when (element? (shen.lazyderef D V9416) (cons in (cons out ()))) V9416 V9417 K8823 (freeze (shen.system-S-h File string V9415 V9416 V9417 K8823 V9419))))))) (if (cons? Tm8928) (let Tm8930 (shen.lazyderef (hd Tm8928) V9416) (let GoTo8931 (freeze (let Tm8932 (shen.lazyderef (tl Tm8928) V9416) (let GoTo8933 (lambda D (GoTo8929 D)) (if (cons? Tm8932) (let D (hd Tm8932) (let Tm8934 (shen.lazyderef (tl Tm8932) V9416) (let GoTo8935 (freeze (GoTo8933 D)) (if (= Tm8934 ()) (thaw GoTo8935) (if (shen.pvar? Tm8934) (shen.bind! Tm8934 () V9416 GoTo8935) false))))) (if (shen.pvar? Tm8932) (let D (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8932 (cons D ()) V9416 (freeze (GoTo8933 D))))) false))))) (if (= Tm8930 stream) (thaw GoTo8931) (if (shen.pvar? Tm8930) (shen.bind! Tm8930 stream V9416 GoTo8931) false)))) (if (shen.pvar? Tm8928) (let D (shen.newpv V9416) (shen.gc V9416 (shen.bind! Tm8928 (cons stream (cons D ())) V9416 (freeze (GoTo8929 D))))) false)))) false))) false))) false)) false)) false)) false) (if (= C8922 false) (let C8936 (if (shen.unlocked? V9417) (let Tm8937 (shen.lazyderef V9413 V9416) (if (cons? Tm8937) (let Tm8938 (shen.lazyderef (hd Tm8937) V9416) (if (= Tm8938 type) (let Tm8939 (shen.lazyderef (tl Tm8937) V9416) (if (cons? Tm8939) (let X (hd Tm8939) (let Tm8940 (shen.lazyderef (tl Tm8939) V9416) (if (cons? Tm8940) (let A (hd Tm8940) (let Tm8941 (shen.lazyderef (tl Tm8940) V9416) (if (= Tm8941 ()) (do (shen.incinfs) (shen.cut V9416 V9417 K8823 (freeze (is! (shen.rectify-type (shen.deref A V9416)) V9414 V9416 V9417 K8823 (freeze (shen.system-S-h X V9414 V9415 V9416 V9417 K8823 V9419)))))) false))) false))) false)) false)) false)) false) (if (= C8936 false) (let C8942 (if (shen.unlocked? V9417) (let Tm8943 (shen.lazyderef V9413 V9416) (if (cons? Tm8943) (let Tm8944 (shen.lazyderef (hd Tm8943) V9416) (if (= Tm8944 input+) (let Tm8945 (shen.lazyderef (tl Tm8943) V9416) (if (cons? Tm8945) (let A (hd Tm8945) (let Tm8946 (shen.lazyderef (tl Tm8945) V9416) (if (cons? Tm8946) (let Stream (hd Tm8946) (let Tm8947 (shen.lazyderef (tl Tm8946) V9416) (if (= Tm8947 ()) (do (shen.incinfs) (is! V9414 (shen.rectify-type (shen.deref A V9416)) V9416 V9417 K8823 (freeze (shen.system-S-h Stream (cons stream (cons in ())) V9415 V9416 V9417 K8823 V9419)))) false))) false))) false)) false)) false)) false) (if (= C8942 false) (let C8948 (if (shen.unlocked? V9417) (let Tm8949 (shen.lazyderef V9413 V9416) (if (cons? Tm8949) (let Tm8950 (shen.lazyderef (hd Tm8949) V9416) (if (= Tm8950 set) (let Tm8951 (shen.lazyderef (tl Tm8949) V9416) (if (cons? Tm8951) (let Var (hd Tm8951) (let Tm8952 (shen.lazyderef (tl Tm8951) V9416) (if (cons? Tm8952) (let Val (hd Tm8952) (let Tm8953 (shen.lazyderef (tl Tm8952) V9416) (if (= Tm8953 ()) (do (shen.incinfs) (shen.system-S-h Var symbol V9415 V9416 V9417 K8823 (freeze (shen.system-S-h (cons value (cons Var ())) V9414 V9415 V9416 V9417 K8823 (freeze (shen.system-S-h Val V9414 V9415 V9416 V9417 K8823 V9419)))))) false))) false))) false)) false)) false)) false) (if (= C8948 false) (let C8954 (if (shen.unlocked? V9417) (let Normalised (shen.newpv V9416) (shen.gc V9416 (do (shen.incinfs) (shen.l-rules V9415 Normalised false V9416 V9417 K8823 (freeze (shen.cut V9416 V9417 K8823 (freeze (shen.system-S-h V9413 V9414 Normalised V9416 V9417 K8823 V9419)))))))) false) (if (= C8954 false) (let C8955 (if (shen.unlocked? V9417) (do (shen.incinfs) (shen.search-user-datatypes (cons V9413 (cons (intern ":") (cons V9414 ()))) V9415 (value shen.*datatypes*) V9416 V9417 K8823 V9419)) false) (if (= C8955 false) (shen.unlock V9417 K8823) C8955)) C8954)) C8948)) C8942)) C8936)) C8922)) C8915)) C8899)) C8891)) C8877)) C8861)) C8847)) C8843)) C8839)) C8834)) C8831)) C8830)) C8829)) C8828))))

(defun shen.primitive (V9420 V9421 V9422 V9423 V9424 V9425) (let C8962 (if (shen.unlocked? V9423) (let Tm8963 (shen.lazyderef V9421 V9422) (let GoTo8964 (freeze (do (shen.incinfs) (when (number? (shen.lazyderef V9420 V9422)) V9422 V9423 V9424 V9425))) (if (= Tm8963 number) (thaw GoTo8964) (if (shen.pvar? Tm8963) (shen.bind! Tm8963 number V9422 GoTo8964) false)))) false) (if (= C8962 false) (let C8965 (if (shen.unlocked? V9423) (let Tm8966 (shen.lazyderef V9421 V9422) (let GoTo8967 (freeze (do (shen.incinfs) (when (boolean? (shen.lazyderef V9420 V9422)) V9422 V9423 V9424 V9425))) (if (= Tm8966 boolean) (thaw GoTo8967) (if (shen.pvar? Tm8966) (shen.bind! Tm8966 boolean V9422 GoTo8967) false)))) false) (if (= C8965 false) (let C8968 (if (shen.unlocked? V9423) (let Tm8969 (shen.lazyderef V9421 V9422) (let GoTo8970 (freeze (do (shen.incinfs) (when (string? (shen.lazyderef V9420 V9422)) V9422 V9423 V9424 V9425))) (if (= Tm8969 string) (thaw GoTo8970) (if (shen.pvar? Tm8969) (shen.bind! Tm8969 string V9422 GoTo8970) false)))) false) (if (= C8968 false) (let C8971 (if (shen.unlocked? V9423) (let Tm8972 (shen.lazyderef V9421 V9422) (let GoTo8973 (freeze (do (shen.incinfs) (when (symbol? (shen.lazyderef V9420 V9422)) V9422 V9423 V9424 V9425))) (if (= Tm8972 symbol) (thaw GoTo8973) (if (shen.pvar? Tm8972) (shen.bind! Tm8972 symbol V9422 GoTo8973) false)))) false) (if (= C8971 false) (if (shen.unlocked? V9423) (let Tm8974 (shen.lazyderef V9420 V9422) (if (= Tm8974 ()) (let Tm8975 (shen.lazyderef V9421 V9422) (let GoTo8976 (lambda A (do (shen.incinfs) (thaw V9425))) (if (cons? Tm8975) (let Tm8977 (shen.lazyderef (hd Tm8975) V9422) (let GoTo8978 (freeze (let Tm8979 (shen.lazyderef (tl Tm8975) V9422) (let GoTo8980 (lambda A (GoTo8976 A)) (if (cons? Tm8979) (let A (hd Tm8979) (let Tm8981 (shen.lazyderef (tl Tm8979) V9422) (let GoTo8982 (freeze (GoTo8980 A)) (if (= Tm8981 ()) (thaw GoTo8982) (if (shen.pvar? Tm8981) (shen.bind! Tm8981 () V9422 GoTo8982) false))))) (if (shen.pvar? Tm8979) (let A (shen.newpv V9422) (shen.gc V9422 (shen.bind! Tm8979 (cons A ()) V9422 (freeze (GoTo8980 A))))) false))))) (if (= Tm8977 list) (thaw GoTo8978) (if (shen.pvar? Tm8977) (shen.bind! Tm8977 list V9422 GoTo8978) false)))) (if (shen.pvar? Tm8975) (let A (shen.newpv V9422) (shen.gc V9422 (shen.bind! Tm8975 (cons list (cons A ())) V9422 (freeze (GoTo8976 A))))) false)))) false)) false) C8971)) C8968)) C8965)) C8962)))

(defun shen.by-hypothesis (V9426 V9427 V9428 V9429 V9430 V9431 V9432) (let C8990 (if (shen.unlocked? V9430) (let Tm8991 (shen.lazyderef V9428 V9429) (if (cons? Tm8991) (let Tm8992 (shen.lazyderef (hd Tm8991) V9429) (if (cons? Tm8992) (let Y (hd Tm8992) (let Tm8993 (shen.lazyderef (tl Tm8992) V9429) (if (cons? Tm8993) (let Colon (hd Tm8993) (let Tm8994 (shen.lazyderef (tl Tm8993) V9429) (if (cons? Tm8994) (let B (hd Tm8994) (let Tm8995 (shen.lazyderef (tl Tm8994) V9429) (if (= Tm8995 ()) (do (shen.incinfs) (when (= (shen.deref Colon V9429) (intern ":")) V9429 V9430 V9431 (freeze (when (= (shen.deref V9426 V9429) (shen.deref Y V9429)) V9429 V9430 V9431 (freeze (is! V9427 B V9429 V9430 V9431 V9432)))))) false))) false))) false))) false)) false)) false) (if (= C8990 false) (if (shen.unlocked? V9430) (let Tm8996 (shen.lazyderef V9428 V9429) (if (cons? Tm8996) (let Hyp (tl Tm8996) (do (shen.incinfs) (shen.by-hypothesis V9426 V9427 Hyp V9429 V9430 V9431 V9432))) false)) false) C8990)))

(defun shen.lookupsig (V9433 V9434 V9435 V9436 V9437 V9438) (if (shen.unlocked? V9436) (do (shen.incinfs) (shen.sigf (assoc V9433 (value shen.*sigf*)) V9434 V9435 V9436 V9437 V9438)) false))

(defun shen.sigf (V9453 V9454 V9455 V9456 V9457 V9458) (cond ((cons? V9453) ((((((tl V9453) V9454) V9455) V9456) V9457) V9458)) (true false)))

(defun shen.freshterm (V9459) (let V (absvector 3) (let V0 (address-> V 0 shen.print-freshterm) (let V1 (address-> V0 1 V9459) (let V2 (address-> V1 2 (set shen.*gensym* (+ 1 (value shen.*gensym*)))) V2)))))

(defun shen.print-freshterm (V9460) (cn "&&" (str (<-address V9460 1))))

(defun shen.search-user-datatypes (V9461 V9462 V9463 V9464 V9465 V9466 V9467) (let C9010 (if (shen.unlocked? V9465) (let Tm9011 (shen.lazyderef V9463 V9464) (if (cons? Tm9011) (let Tm9012 (shen.lazyderef (hd Tm9011) V9464) (if (cons? Tm9012) (let Fn (tl Tm9012) (do (shen.incinfs) (call (((shen.deref Fn V9464) (shen.deref V9461 V9464)) (shen.deref V9462 V9464)) V9464 V9465 V9466 V9467))) false)) false)) false) (if (= C9010 false) (if (shen.unlocked? V9465) (let Tm9013 (shen.lazyderef V9463 V9464) (if (cons? Tm9013) (let Ds (tl Tm9013) (do (shen.incinfs) (shen.search-user-datatypes V9461 V9462 Ds V9464 V9465 V9466 V9467))) false)) false) C9010)))

(defun shen.l-rules (V9468 V9469 V9470 V9471 V9472 V9473 V9474) (let K9016 (+ V9473 1) (let C9021 (if (shen.unlocked? V9472) (let Tm9022 (shen.lazyderef V9468 V9471) (if (= Tm9022 ()) (let Tm9023 (shen.lazyderef V9470 V9471) (if (= Tm9023 true) (do (shen.incinfs) (shen.cut V9471 V9472 K9016 (freeze (bind V9469 () V9471 V9472 K9016 V9474)))) false)) false)) false) (if (= C9021 false) (let C9024 (if (shen.unlocked? V9472) (let Tm9025 (shen.lazyderef V9468 V9471) (if (cons? Tm9025) (let Tm9026 (shen.lazyderef (hd Tm9025) V9471) (if (cons? Tm9026) (let Tm9027 (shen.lazyderef (hd Tm9026) V9471) (if (cons? Tm9027) (let Tm9028 (shen.lazyderef (hd Tm9027) V9471) (if (= Tm9028 cons) (let Tm9029 (shen.lazyderef (tl Tm9027) V9471) (if (cons? Tm9029) (let X (hd Tm9029) (let Tm9030 (shen.lazyderef (tl Tm9029) V9471) (if (cons? Tm9030) (let Y (hd Tm9030) (let Tm9031 (shen.lazyderef (tl Tm9030) V9471) (if (= Tm9031 ()) (let Tm9032 (shen.lazyderef (tl Tm9026) V9471) (if (cons? Tm9032) (let Colon (hd Tm9032) (let Tm9033 (shen.lazyderef (tl Tm9032) V9471) (if (cons? Tm9033) (let Tm9034 (shen.lazyderef (hd Tm9033) V9471) (if (cons? Tm9034) (let Tm9035 (shen.lazyderef (hd Tm9034) V9471) (if (= Tm9035 list) (let Tm9036 (shen.lazyderef (tl Tm9034) V9471) (if (cons? Tm9036) (let A (hd Tm9036) (let Tm9037 (shen.lazyderef (tl Tm9036) V9471) (if (= Tm9037 ()) (let Tm9038 (shen.lazyderef (tl Tm9033) V9471) (if (= Tm9038 ()) (let Hyp (tl Tm9025) (do (shen.incinfs) (when (= (shen.deref Colon V9471) (intern ":")) V9471 V9472 K9016 (freeze (shen.cut V9471 V9472 K9016 (freeze (shen.l-rules (cons (cons X (cons Colon (cons A ()))) (cons (cons Y (cons Colon (cons (cons list (cons A ())) ()))) Hyp)) V9469 true V9471 V9472 K9016 V9474))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9024 false) (let C9039 (if (shen.unlocked? V9472) (let Tm9040 (shen.lazyderef V9468 V9471) (if (cons? Tm9040) (let Tm9041 (shen.lazyderef (hd Tm9040) V9471) (if (cons? Tm9041) (let Tm9042 (shen.lazyderef (hd Tm9041) V9471) (if (cons? Tm9042) (let Tm9043 (shen.lazyderef (hd Tm9042) V9471) (if (= Tm9043 @p) (let Tm9044 (shen.lazyderef (tl Tm9042) V9471) (if (cons? Tm9044) (let X (hd Tm9044) (let Tm9045 (shen.lazyderef (tl Tm9044) V9471) (if (cons? Tm9045) (let Y (hd Tm9045) (let Tm9046 (shen.lazyderef (tl Tm9045) V9471) (if (= Tm9046 ()) (let Tm9047 (shen.lazyderef (tl Tm9041) V9471) (if (cons? Tm9047) (let Colon (hd Tm9047) (let Tm9048 (shen.lazyderef (tl Tm9047) V9471) (if (cons? Tm9048) (let Tm9049 (shen.lazyderef (hd Tm9048) V9471) (if (cons? Tm9049) (let A (hd Tm9049) (let Tm9050 (shen.lazyderef (tl Tm9049) V9471) (if (cons? Tm9050) (let Tm9051 (shen.lazyderef (hd Tm9050) V9471) (if (= Tm9051 *) (let Tm9052 (shen.lazyderef (tl Tm9050) V9471) (if (cons? Tm9052) (let B (hd Tm9052) (let Tm9053 (shen.lazyderef (tl Tm9052) V9471) (if (= Tm9053 ()) (let Tm9054 (shen.lazyderef (tl Tm9048) V9471) (if (= Tm9054 ()) (let Hyp (tl Tm9040) (do (shen.incinfs) (when (= (shen.deref Colon V9471) (intern ":")) V9471 V9472 K9016 (freeze (shen.cut V9471 V9472 K9016 (freeze (shen.l-rules (cons (cons X (cons Colon (cons A ()))) (cons (cons Y (cons Colon (cons B ()))) Hyp)) V9469 true V9471 V9472 K9016 V9474))))))) false)) false))) false)) false)) false))) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9039 false) (let C9055 (if (shen.unlocked? V9472) (let Tm9056 (shen.lazyderef V9468 V9471) (if (cons? Tm9056) (let Tm9057 (shen.lazyderef (hd Tm9056) V9471) (if (cons? Tm9057) (let Tm9058 (shen.lazyderef (hd Tm9057) V9471) (if (cons? Tm9058) (let Tm9059 (shen.lazyderef (hd Tm9058) V9471) (if (= Tm9059 @s) (let Tm9060 (shen.lazyderef (tl Tm9058) V9471) (if (cons? Tm9060) (let X (hd Tm9060) (let Tm9061 (shen.lazyderef (tl Tm9060) V9471) (if (cons? Tm9061) (let Y (hd Tm9061) (let Tm9062 (shen.lazyderef (tl Tm9061) V9471) (if (= Tm9062 ()) (let Tm9063 (shen.lazyderef (tl Tm9057) V9471) (if (cons? Tm9063) (let Colon (hd Tm9063) (let Tm9064 (shen.lazyderef (tl Tm9063) V9471) (if (cons? Tm9064) (let Tm9065 (shen.lazyderef (hd Tm9064) V9471) (if (= Tm9065 string) (let Tm9066 (shen.lazyderef (tl Tm9064) V9471) (if (= Tm9066 ()) (let Hyp (tl Tm9056) (do (shen.incinfs) (when (= (shen.deref Colon V9471) (intern ":")) V9471 V9472 K9016 (freeze (shen.cut V9471 V9472 K9016 (freeze (shen.l-rules (cons (cons X (cons Colon (cons string ()))) (cons (cons Y (cons Colon (cons string ()))) Hyp)) V9469 true V9471 V9472 K9016 V9474))))))) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9055 false) (let C9067 (if (shen.unlocked? V9472) (let Tm9068 (shen.lazyderef V9468 V9471) (if (cons? Tm9068) (let Tm9069 (shen.lazyderef (hd Tm9068) V9471) (if (cons? Tm9069) (let Tm9070 (shen.lazyderef (hd Tm9069) V9471) (if (cons? Tm9070) (let Tm9071 (shen.lazyderef (hd Tm9070) V9471) (if (= Tm9071 @v) (let Tm9072 (shen.lazyderef (tl Tm9070) V9471) (if (cons? Tm9072) (let X (hd Tm9072) (let Tm9073 (shen.lazyderef (tl Tm9072) V9471) (if (cons? Tm9073) (let Y (hd Tm9073) (let Tm9074 (shen.lazyderef (tl Tm9073) V9471) (if (= Tm9074 ()) (let Tm9075 (shen.lazyderef (tl Tm9069) V9471) (if (cons? Tm9075) (let Colon (hd Tm9075) (let Tm9076 (shen.lazyderef (tl Tm9075) V9471) (if (cons? Tm9076) (let Tm9077 (shen.lazyderef (hd Tm9076) V9471) (if (cons? Tm9077) (let Tm9078 (shen.lazyderef (hd Tm9077) V9471) (if (= Tm9078 vector) (let Tm9079 (shen.lazyderef (tl Tm9077) V9471) (if (cons? Tm9079) (let A (hd Tm9079) (let Tm9080 (shen.lazyderef (tl Tm9079) V9471) (if (= Tm9080 ()) (let Tm9081 (shen.lazyderef (tl Tm9076) V9471) (if (= Tm9081 ()) (let Hyp (tl Tm9068) (do (shen.incinfs) (when (= (shen.deref Colon V9471) (intern ":")) V9471 V9472 K9016 (freeze (shen.cut V9471 V9472 K9016 (freeze (shen.l-rules (cons (cons X (cons Colon (cons A ()))) (cons (cons Y (cons Colon (cons (cons vector (cons A ())) ()))) Hyp)) V9469 true V9471 V9472 K9016 V9474))))))) false)) false))) false)) false)) false)) false))) false)) false))) false))) false)) false)) false)) false)) false)) false) (if (= C9067 false) (let C9082 (if (shen.unlocked? V9472) (let Tm9083 (shen.lazyderef V9468 V9471) (if (cons? Tm9083) (let P (hd Tm9083) (let Hyp (tl Tm9083) (let Tm9084 (shen.lazyderef V9469 V9471) (let GoTo9085 (lambda Q (lambda Normalised (do (shen.incinfs) (bind Q P V9471 V9472 K9016 (freeze (shen.l-rules Hyp Normalised V9470 V9471 V9472 K9016 V9474)))))) (if (cons? Tm9084) (let Q (hd Tm9084) (let Normalised (tl Tm9084) ((GoTo9085 Q) Normalised))) (if (shen.pvar? Tm9084) (let Q (shen.newpv V9471) (shen.gc V9471 (let Normalised (shen.newpv V9471) (shen.gc V9471 (shen.bind! Tm9084 (cons Q Normalised) V9471 (freeze ((GoTo9085 Q) Normalised))))))) false)))))) false)) false) (if (= C9082 false) (shen.unlock V9472 K9016) C9082)) C9067)) C9055)) C9039)) C9024)) C9021))))

(defun shen.t* (V9475 V9476 V9477 V9478 V9479 V9480) (let K9088 (+ V9479 1) (let C9092 (if (shen.unlocked? V9478) (let Tm9093 (shen.lazyderef V9475 V9477) (if (cons? Tm9093) (let Tm9094 (shen.lazyderef (hd Tm9093) V9477) (if (= Tm9094 define) (let Tm9095 (shen.lazyderef (tl Tm9093) V9477) (if (cons? Tm9095) (let F (hd Tm9095) (let X (tl Tm9095) (let SigxRules (shen.newpv V9477) (shen.gc V9477 (let Rules (shen.newpv V9477) (shen.gc V9477 (let FreshSig (shen.newpv V9477) (shen.gc V9477 (let Sig (shen.newpv V9477) (shen.gc V9477 (do (shen.incinfs) (shen.cut V9477 V9478 K9088 (freeze (bind SigxRules (shen.sigxrules (cons F X)) V9477 V9478 K9088 (freeze (bind Sig (fst (shen.lazyderef SigxRules V9477)) V9477 V9478 K9088 (freeze (bind Rules (snd (shen.lazyderef SigxRules V9477)) V9477 V9478 K9088 (freeze (bind FreshSig (shen.freshen-sig (shen.deref Sig V9477)) V9477 V9478 K9088 (freeze (shen.t*-rules F Rules FreshSig 1 V9477 V9478 K9088 (freeze (is Sig V9476 V9477 V9478 K9088 V9480)))))))))))))))))))))))) false)) false)) false)) false) (if (= C9092 false) (shen.unlock V9478 K9088) C9092))))

(defun shen.sigxrules (V9481) (compile (lambda X (shen.<sig*rules> X)) V9481))

(defun shen.<sig*rules> (V9482) (let Result (if (shen.non-empty-stream? V9482) (let F (shen.hds V9482) (let News9097 (shen.tls V9482) (if (shen.=hd? News9097 {) (let News9098 (shen.tls News9097) (let Parseshen.<signature> (shen.<signature> News9098) (if (shen.parse-failure? Parseshen.<signature>) (shen.parse-failure) (if (shen.=hd? Parseshen.<signature> }) (let News9099 (shen.tls Parseshen.<signature>) (let Parseshen.<rules*> (shen.<rules*> News9099) (if (shen.parse-failure? Parseshen.<rules*>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<rules*>) (let Rectified (shen.rectify-type (shen.<-out Parseshen.<signature>)) (@p Rectified (shen.<-out Parseshen.<rules*>))))))) (shen.parse-failure))))) (shen.parse-failure)))) (shen.parse-failure)) (if (shen.parse-failure? Result) (shen.parse-failure) Result)))

(defun shen.freshen-sig (V9483) (let Vs (shen.extract-vars V9483) (let Assoc (map (lambda V (cons V (shen.freshterm (concat & V)))) Vs) (shen.freshen-type Assoc V9483))))

(defun shen.freshen-type (V9484 V9485) (cond ((= () V9484) V9485) ((and (cons? V9484) (cons? (hd V9484))) (shen.freshen-type (tl V9484) (subst (tl (hd V9484)) (hd (hd V9484)) V9485))) (true (shen.f-error shen.freshen-type))))

(defun shen.<rules*> (V9486) (let Result (let Parseshen.<rule*> (shen.<rule*> V9486) (if (shen.parse-failure? Parseshen.<rule*>) (shen.parse-failure) (let Parseshen.<rules*> (shen.<rules*> Parseshen.<rule*>) (if (shen.parse-failure? Parseshen.<rules*>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<rules*>) (cons (shen.<-out Parseshen.<rule*>) (shen.<-out Parseshen.<rules*>))))))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<rule*> (shen.<rule*> V9486) (if (shen.parse-failure? Parseshen.<rule*>) (shen.parse-failure) (shen.comb (shen.in-> Parseshen.<rule*>) (cons (shen.<-out Parseshen.<rule*>) ())))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)))

(defun shen.<rule*> (V9487) (let Result (let Parseshen.<patterns> (shen.<patterns> V9487) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> ->) (let News9102 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9102) (let Action (shen.hds News9102) (let News9103 (shen.tls News9102) (if (shen.=hd? News9103 where) (let News9104 (shen.tls News9103) (if (shen.non-empty-stream? News9104) (let Guard (shen.hds News9104) (let News9105 (shen.tls News9104) (shen.comb (shen.in-> News9105) (@p (shen.<-out Parseshen.<patterns>) (cons where (cons Guard (cons Action ()))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<patterns> (shen.<patterns> V9487) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> <-) (let News9106 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9106) (let Action (shen.hds News9106) (let News9107 (shen.tls News9106) (if (shen.=hd? News9107 where) (let News9108 (shen.tls News9107) (if (shen.non-empty-stream? News9108) (let Guard (shen.hds News9108) (let News9109 (shen.tls News9108) (shen.comb (shen.in-> News9109) (@p (shen.<-out Parseshen.<patterns>) (shen.correct (cons where (cons Guard (cons Action ())))))))) (shen.parse-failure))) (shen.parse-failure)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<patterns> (shen.<patterns> V9487) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> <-) (let News9110 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9110) (let Action (shen.hds News9110) (let News9111 (shen.tls News9110) (shen.comb (shen.in-> News9111) (@p (shen.<-out Parseshen.<patterns>) (shen.correct Action))))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (let Result (let Parseshen.<patterns> (shen.<patterns> V9487) (if (shen.parse-failure? Parseshen.<patterns>) (shen.parse-failure) (if (shen.=hd? Parseshen.<patterns> ->) (let News9112 (shen.tls Parseshen.<patterns>) (if (shen.non-empty-stream? News9112) (let Action (shen.hds News9112) (let News9113 (shen.tls News9112) (shen.comb (shen.in-> News9113) (@p (shen.<-out Parseshen.<patterns>) Action)))) (shen.parse-failure))) (shen.parse-failure)))) (if (shen.parse-failure? Result) (shen.parse-failure) Result)) Result)) Result)) Result)))

(defun shen.correct (V9488) (cond ((and (cons? V9488) (and (= where (hd V9488)) (and (cons? (tl V9488)) (and (cons? (tl (tl V9488))) (and (cons? (hd (tl (tl V9488)))) (and (= fail-if (hd (hd (tl (tl V9488))))) (and (cons? (tl (hd (tl (tl V9488))))) (and (cons? (tl (tl (hd (tl (tl V9488)))))) (and (= () (tl (tl (tl (hd (tl (tl V9488))))))) (= () (tl (tl (tl V9488))))))))))))) (cons where (cons (cons and (cons (hd (tl V9488)) (cons (cons not (cons (tl (hd (tl (tl V9488)))) ())) ()))) (tl (tl (hd (tl (tl V9488)))))))) ((and (cons? V9488) (and (= where (hd V9488)) (and (cons? (tl V9488)) (and (cons? (tl (tl V9488))) (= () (tl (tl (tl V9488)))))))) (cons where (cons (cons and (cons (hd (tl V9488)) (cons (cons not (cons (cons = (cons (hd (tl (tl V9488))) (cons (cons fail ()) ()))) ())) ()))) (tl (tl V9488))))) ((and (cons? V9488) (and (= fail-if (hd V9488)) (and (cons? (tl V9488)) (and (cons? (tl (tl V9488))) (= () (tl (tl (tl V9488)))))))) (cons where (cons (cons not (cons (tl V9488) ())) (tl (tl V9488))))) (true (cons where (cons (cons not (cons (cons = (cons V9488 (cons (cons fail ()) ()))) ())) (cons V9488 ()))))))

(defun shen.t*-rules (V9489 V9490 V9491 V9492 V9493 V9494 V9495 V9496) (let K9116 (+ V9495 1) (let C9122 (if (shen.unlocked? V9494) (let Tm9123 (shen.lazyderef V9490 V9493) (if (= Tm9123 ()) (do (shen.incinfs) (thaw V9496)) false)) false) (if (= C9122 false) (let C9124 (if (shen.unlocked? V9494) (let Tm9125 (shen.lazyderef V9490 V9493) (if (cons? Tm9125) (let Rule (hd Tm9125) (let Rules (tl Tm9125) (let Fresh (shen.newpv V9493) (shen.gc V9493 (do (shen.incinfs) (bind Fresh (shen.freshen-rule (shen.deref Rule V9493)) V9493 V9494 K9116 (freeze (shen.t*-rule V9489 V9492 (fst (shen.lazyderef Fresh V9493)) (snd (shen.lazyderef Fresh V9493)) V9491 V9493 V9494 K9116 (freeze (shen.cut V9493 V9494 K9116 (freeze (shen.t*-rules V9489 Rules V9491 (+ V9492 1) V9493 V9494 K9116 V9496)))))))))))) false)) false) (if (= C9124 false) (shen.unlock V9494 K9116) C9124)) C9122))))

(defun shen.freshen-rule (V9497) (cond ((tuple? V9497) (let Vs (shen.extract-vars (fst V9497)) (let Assoc (map (lambda V (cons V (shen.freshterm V))) Vs) (@p (shen.freshen Assoc (fst V9497)) (shen.freshen Assoc (snd V9497)))))) (true (shen.f-error shen.freshen-rule))))

(defun shen.freshen (V9498 V9499) (cond ((= () V9498) V9499) ((and (cons? V9498) (cons? (hd V9498))) (shen.freshen (tl V9498) (shen.beta (hd (hd V9498)) (tl (hd V9498)) V9499))) (true (shen.f-error shen.freshen))))

(defun shen.t*-rule (V9500 V9501 V9502 V9503 V9504 V9505 V9506 V9507 V9508) (let C9135 (if (shen.unlocked? V9506) (do (shen.incinfs) (shen.t*-rule-h V9502 V9503 V9504 V9505 V9506 V9507 V9508)) false) (if (= C9135 false) (if (shen.unlocked? V9506) (let Err (shen.newpv V9505) (shen.gc V9505 (do (shen.incinfs) (bind Err (simple-error (cn "type error in rule " (shen.app V9501 (cn " of " (shen.app V9500 "
" shen.a)) shen.a))) V9505 V9506 V9507 V9508)))) false) C9135)))

(defun shen.t*-rule-h (V9509 V9510 V9511 V9512 V9513 V9514 V9515) (let K9138 (+ V9514 1) (let C9143 (if (shen.unlocked? V9513) (let Tm9144 (shen.lazyderef V9509 V9512) (if (= Tm9144 ()) (let Tm9145 (shen.lazyderef V9511 V9512) (if (cons? Tm9145) (let Tm9146 (shen.lazyderef (hd Tm9145) V9512) (if (= Tm9146 -->) (let Tm9147 (shen.lazyderef (tl Tm9145) V9512) (if (cons? Tm9147) (let A (hd Tm9147) (let Tm9148 (shen.lazyderef (tl Tm9147) V9512) (if (= Tm9148 ()) (do (shen.incinfs) (shen.cut V9512 V9513 K9138 (freeze (shen.t*-correct V9510 A () V9512 V9513 K9138 V9515)))) false))) false)) false)) false)) false)) false) (if (= C9143 false) (let C9149 (if (shen.unlocked? V9513) (let B (shen.newpv V9512) (shen.gc V9512 (let Hyps (shen.newpv V9512) (shen.gc V9512 (do (shen.incinfs) (shen.p-hyps (shen.freshterms V9509) Hyps V9512 V9513 K9138 (freeze (shen.t*-integrity V9509 V9511 Hyps B V9512 V9513 K9138 (freeze (shen.cut V9512 V9513 K9138 (freeze (shen.t*-correct V9510 B Hyps V9512 V9513 K9138 V9515)))))))))))) false) (if (= C9149 false) (shen.unlock V9513 K9138) C9149)) C9143))))

(defun shen.freshterms (V9518) (cond ((= () V9518) ()) ((and (cons? V9518) (cons? (hd V9518))) (shen.freshterms (append (hd V9518) (tl V9518)))) ((and (cons? V9518) (shen.freshterm? (hd V9518))) (adjoin (hd V9518) (shen.freshterms (tl V9518)))) ((cons? V9518) (shen.freshterms (tl V9518))) (true (shen.f-error shen.freshterms))))

(defun shen.p-hyps (V9519 V9520 V9521 V9522 V9523 V9524) (let C9156 (if (shen.unlocked? V9522) (let Tm9157 (shen.lazyderef V9519 V9521) (if (= Tm9157 ()) (let Tm9158 (shen.lazyderef V9520 V9521) (let GoTo9159 (freeze (do (shen.incinfs) (thaw V9524))) (if (= Tm9158 ()) (thaw GoTo9159) (if (shen.pvar? Tm9158) (shen.bind! Tm9158 () V9521 GoTo9159) false)))) false)) false) (if (= C9156 false) (if (shen.unlocked? V9522) (let Tm9160 (shen.lazyderef V9519 V9521) (if (cons? Tm9160) (let P (hd Tm9160) (let Ps (tl Tm9160) (let Tm9161 (shen.lazyderef V9520 V9521) (let GoTo9162 (lambda Q (lambda Colon (lambda A (lambda Hyps (do (shen.incinfs) (bind Q P V9521 V9522 V9523 (freeze (bind Colon (intern ":") V9521 V9522 V9523 (freeze (shen.p-hyps Ps Hyps V9521 V9522 V9523 V9524)))))))))) (if (cons? Tm9161) (let Tm9163 (shen.lazyderef (hd Tm9161) V9521) (let GoTo9164 (lambda Q (lambda Colon (lambda A (let Hyps (tl Tm9161) ((((GoTo9162 Q) Colon) A) Hyps))))) (if (cons? Tm9163) (let Q (hd Tm9163) (let Tm9165 (shen.lazyderef (tl Tm9163) V9521) (let GoTo9166 (lambda Colon (lambda A (((GoTo9164 Q) Colon) A))) (if (cons? Tm9165) (let Colon (hd Tm9165) (let Tm9167 (shen.lazyderef (tl Tm9165) V9521) (let GoTo9168 (lambda A ((GoTo9166 Colon) A)) (if (cons? Tm9167) (let A (hd Tm9167) (let Tm9169 (shen.lazyderef (tl Tm9167) V9521) (let GoTo9170 (freeze (GoTo9168 A)) (if (= Tm9169 ()) (thaw GoTo9170) (if (shen.pvar? Tm9169) (shen.bind! Tm9169 () V9521 GoTo9170) false))))) (if (shen.pvar? Tm9167) (let A (shen.newpv V9521) (shen.gc V9521 (shen.bind! Tm9167 (cons A ()) V9521 (freeze (GoTo9168 A))))) false))))) (if (shen.pvar? Tm9165) (let Colon (shen.newpv V9521) (shen.gc V9521 (let A (shen.newpv V9521) (shen.gc V9521 (shen.bind! Tm9165 (cons Colon (cons A ())) V9521 (freeze ((GoTo9166 Colon) A))))))) false))))) (if (shen.pvar? Tm9163) (let Q (shen.newpv V9521) (shen.gc V9521 (let Colon (shen.newpv V9521) (shen.gc V9521 (let A (shen.newpv V9521) (shen.gc V9521 (shen.bind! Tm9163 (cons Q (cons Colon (cons A ()))) V9521 (freeze (((GoTo9164 Q) Colon) A))))))))) false)))) (if (shen.pvar? Tm9161) (let Q (shen.newpv V9521) (shen.gc V9521 (let Colon (shen.newpv V9521) (shen.gc V9521 (let A (shen.newpv V9521) (shen.gc V9521 (let Hyps (shen.newpv V9521) (shen.gc V9521 (shen.bind! Tm9161 (cons (cons Q (cons Colon (cons A ()))) Hyps) V9521 (freeze ((((GoTo9162 Q) Colon) A) Hyps))))))))))) false)))))) false)) false) C9156)))

(defun shen.t*-correct (V9525 V9526 V9527 V9528 V9529 V9530 V9531) (let K9173 (+ V9530 1) (let C9178 (if (shen.unlocked? V9529) (let Tm9179 (shen.lazyderef V9525 V9528) (if (cons? Tm9179) (let Tm9180 (shen.lazyderef (hd Tm9179) V9528) (if (= Tm9180 where) (let Tm9181 (shen.lazyderef (tl Tm9179) V9528) (if (cons? Tm9181) (let G (hd Tm9181) (let Tm9182 (shen.lazyderef (tl Tm9181) V9528) (if (cons? Tm9182) (let R (hd Tm9182) (let Tm9183 (shen.lazyderef (tl Tm9182) V9528) (if (= Tm9183 ()) (let CurryG (shen.newpv V9528) (shen.gc V9528 (do (shen.incinfs) (shen.cut V9528 V9529 K9173 (freeze (bind CurryG (shen.curry G) V9528 V9529 K9173 (freeze (shen.system-S-h CurryG boolean V9527 V9528 V9529 K9173 (freeze (shen.cut V9528 V9529 K9173 (freeze (shen.t*-correct R V9526 (cons (cons CurryG (cons (intern ":") (cons verified ()))) V9527) V9528 V9529 K9173 V9531)))))))))))) false))) false))) false)) false)) false)) false) (if (= C9178 false) (let C9184 (if (shen.unlocked? V9529) (do (shen.incinfs) (shen.system-S-h (shen.curry V9525) V9526 V9527 V9528 V9529 K9173 V9531)) false) (if (= C9184 false) (shen.unlock V9529 K9173) C9184)) C9178))))

(defun shen.t*-integrity (V9532 V9533 V9534 V9535 V9536 V9537 V9538 V9539) (let C9194 (if (shen.unlocked? V9537) (let Tm9195 (shen.lazyderef V9532 V9536) (if (= Tm9195 ()) (do (shen.incinfs) (is! V9533 V9535 V9536 V9537 V9538 V9539)) false)) false) (if (= C9194 false) (if (shen.unlocked? V9537) (let Tm9196 (shen.lazyderef V9532 V9536) (if (cons? Tm9196) (let P (hd Tm9196) (let Ps (tl Tm9196) (let Tm9197 (shen.lazyderef V9533 V9536) (if (cons? Tm9197) (let A (hd Tm9197) (let Tm9198 (shen.lazyderef (tl Tm9197) V9536) (if (cons? Tm9198) (let Tm9199 (shen.lazyderef (hd Tm9198) V9536) (if (= Tm9199 -->) (let Tm9200 (shen.lazyderef (tl Tm9198) V9536) (if (cons? Tm9200) (let B (hd Tm9200) (let Tm9201 (shen.lazyderef (tl Tm9200) V9536) (if (= Tm9201 ()) (do (shen.incinfs) (shen.system-S-h P A V9534 V9536 V9537 V9538 (freeze (shen.t*-integrity Ps B V9534 V9535 V9536 V9537 V9538 V9539)))) false))) false)) false)) false))) false)))) false)) false) C9194)))

(defun shen.freshterm? (V9540) (and (absvector? V9540) (and (not (string? V9540)) (= (<-address V9540 0) shen.print-freshterm))))

