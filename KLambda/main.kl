(defun aski.main () (let Args (aski.posix-argv) (let RunResult (run Args) (aski.handleResult RunResult))))

(defun run (V1041) (cond ((and (cons? V1041) (= () (tl V1041))) (trap-error (aski.runFromStdInput) (lambda Y1039 (aski.emitErrorResult Y1039)))) ((and (cons? V1041) (and (cons? (tl V1041)) (= () (tl (tl V1041))))) (trap-error (aski.runScript (hd (tl V1041))) (lambda Y1040 (aski.emitErrorResult Y1040)))) (true (shen.f-error run))))

(defun aski.runFromStdInput () (do (eval (stinput)) (cons aski.success ())))

(defun aski.emitErrorResult (V1042) (cons error (cons V1042 ())))

(defun aski.runScript (V1043) (let Code (read-file V1043) (let Evaluation (map (lambda X (eval-kl ((fn aski.shen->kl) X))) Code) (cons aski.success ()))))

(defun aski.handleResult (V1044) (cond ((and (cons? V1044) (and (= error (hd V1044)) (and (cons? (tl V1044)) (= () (tl (tl V1044)))))) (do (pr (error-to-string (hd (tl V1044))) (stoutput)) (shen.exit 1))) ((and (cons? V1044) (and (= aski.success (hd V1044)) (= () (tl V1044)))) (shen.exit 0)) (true (shen.f-error aski.handleResult))))

