(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (do (pr (error-to-string E) (stoutput)) (nl 0)))) (shen.loop)))))

(defun shen.credits () (do (pr "
Shen, www.shenlanguage.org, copyright (C) 2010-2021, Mark Tarver
" (stoutput)) (do (pr (cn "version: S" (shen.app (value *version*) (cn ", language: " (shen.app (value *language*) (cn ", platform: " (shen.app (value *implementation*) (cn " " (shen.app (value *release*) "
" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (pr (cn "port " (shen.app (value *port*) (cn ", ported by " (shen.app (value *porters*) "

" shen.a)) shen.a)) (stoutput)))))

(defun shen.initialise_environment () (do (set shen.*call* 0) (set shen.*infs* 0)))

(defun shen.prompt () (if (value shen.*tc*) (pr (cn "
(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (pr (cn "
(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.read-evaluate-print () (let Package (value shen.*package*) (let Lineread (shen.package-user-input Package (lineread (stinput))) (let History (shen.update-history) (shen.evaluate-lineread Lineread History (value shen.*tc*))))))

(defun shen.package-user-input (V9562 V9563) (cond ((= null V9562) V9563) (true (let Str (str V9562) (let External (external V9562) (map (lambda X (shen.pui-h Str External X)) V9563))))))

(defun shen.pui-h (V9568 V9569 V9570) (cond ((and (cons? V9570) (and (= fn (hd V9570)) (and (cons? (tl V9570)) (= () (tl (tl V9570)))))) (if (shen.internal? (hd (tl V9570)) V9568 V9569) (cons fn (cons (shen.intern-in-package V9568 (hd (tl V9570))) ())) V9570)) ((cons? V9570) (if (shen.internal? (hd V9570) V9568 V9569) (cons (shen.intern-in-package V9568 (hd V9570)) (map (lambda Y (shen.pui-h V9568 V9569 Y)) (tl V9570))) (if (cons? (hd V9570)) (map (lambda Y (shen.pui-h V9568 V9569 Y)) V9570) (cons (hd V9570) (map (lambda Y (shen.pui-h V9568 V9569 Y)) (tl V9570)))))) (true V9570)))

(defun shen.update-history () (set shen.*history* (cons (it) (value shen.*history*))))

(defun shen.evaluate-lineread (V9581 V9582 V9583) (cond ((and (cons? V9581) (and (= () (tl V9581)) (and (cons? V9582) (and (= "!!" (hd V9582)) (cons? (tl V9582)))))) (let Y (read-from-string (hd (tl V9582))) (let NewHistory (set shen.*history* (cons (hd (tl V9582)) (tl V9582))) (let Print (pr (shen.app (hd (tl V9582)) "
" shen.a) (stoutput)) (shen.evaluate-lineread Y NewHistory V9583))))) ((and (cons? V9581) (and (= () (tl V9581)) (and (cons? V9582) (and (shen.+string? (hd V9582)) (= "%" (hdstr (hd V9582))))))) (let Read (hd (read-from-string (tlstr (hd V9582)))) (let Peek (shen.peek-history Read (tlstr (hd V9582)) (tl V9582)) (let NewHistory (set shen.*history* (tl V9582)) (abort))))) ((and (cons? V9581) (and (= () (tl V9581)) (and (cons? V9582) (and (shen.+string? (hd V9582)) (= "!" (hdstr (hd V9582))))))) (let Read (hd (read-from-string (tlstr (hd V9582)))) (let Match (shen.use-history Read (tlstr (hd V9582)) (tl V9582)) (let Print (pr (shen.app Match "
" shen.a) (stoutput)) (let Y (read-from-string Match) (let NewHistory (set shen.*history* (cons Match (tl V9582))) (shen.evaluate-lineread Y NewHistory V9583))))))) ((and (cons? V9581) (and (= () (tl V9581)) (and (cons? V9582) (and (shen.+string? (hd V9582)) (= "%" (hdstr (hd V9582))))))) (let Read (hd (read-from-string (tlstr (hd V9582)))) (let Peek (shen.peek-history Read (tlstr (hd V9582)) (tl V9582)) (let NewHistory (set shen.*history* (tl V9582)) (abort))))) ((= true V9583) (shen.check-eval-and-print V9581)) ((= false V9583) (shen.eval-and-print V9581)) (true (simple-error "implementation error in shen.evaluate-lineread"))))

(defun shen.use-history (V9584 V9585 V9586) (if (integer? V9584) (nth (+ 1 V9584) (reverse V9586)) (if (symbol? V9584) (shen.string-match V9585 V9586) (simple-error "! expects a number or a symbol
"))))

(defun shen.peek-history (V9587 V9588 V9589) (if (integer? V9587) (pr (cn "
" (shen.app (nth (+ 1 V9587) (reverse V9589)) "" shen.a)) (stoutput)) (if (or (= V9588 "") (symbol? V9587)) (shen.recursive-string-match 0 V9588 (reverse V9589)) (simple-error "% expects a number or a symbol
"))))

(defun shen.string-match (V9599 V9600) (cond ((= () V9600) (simple-error "
input not found")) ((and (cons? V9600) (shen.string-prefix? V9599 (hd V9600))) (hd V9600)) ((cons? V9600) (shen.string-match V9599 (tl V9600))) (true (simple-error "implementation error in shen.string-match"))))

(defun shen.string-prefix? (V9608 V9609) (cond ((= "" V9608) true) ((and (shen.+string? V9608) (shen.whitespace? (string->n (hdstr V9608)))) (shen.string-prefix? (tlstr V9608) V9609)) ((and (shen.+string? V9609) (shen.whitespace? (string->n (hdstr V9609)))) (shen.string-prefix? V9608 (tlstr V9609))) ((and (shen.+string? V9609) (= "(" (hdstr V9609))) (shen.string-prefix? V9608 (tlstr V9609))) ((and (shen.+string? V9608) (and (shen.+string? V9609) (= (hdstr V9608) (hdstr V9609)))) (shen.string-prefix? (tlstr V9608) (tlstr V9609))) (true false)))

(defun shen.recursive-string-match (V9620 V9621 V9622) (cond ((= () V9622) shen.skip) ((cons? V9622) (do (if (shen.string-prefix? V9621 (hd V9622)) (pr (shen.app V9620 (cn ". " (shen.app (hd V9622) "
" shen.a)) shen.a) (stoutput)) shen.skip) (shen.recursive-string-match (+ V9620 1) V9621 (tl V9622)))) (true (simple-error "implementation error in shen.recursive-string-match"))))

