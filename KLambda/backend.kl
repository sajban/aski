(defun shen.kl-to-lisp (V13295) (shen.kl-to-lisp-h () V13295))

(defun shen.kl-to-lisp-h (V13303 V13304) (cond ((= (protect T) (((protect SHEN.MEMBER) V13304) V13303)) V13304) ((and (cons? V13304) (and (= type (hd V13304)) (and (cons? (tl V13304)) (and (cons? (tl (tl V13304))) (= () (tl (tl (tl V13304)))))))) (shen.kl-to-lisp-h V13303 (hd (tl V13304)))) ((and (cons? V13304) (and (= protect (hd V13304)) (and (cons? (tl V13304)) (= () (tl (tl V13304)))))) (shen.kl-to-lisp-h V13303 (hd (tl V13304)))) ((and (cons? V13304) (and (= lambda (hd V13304)) (and (cons? (tl V13304)) (and (cons? (tl (tl V13304))) (and (= () (tl (tl (tl V13304)))) (= (hd (tl V13304)) (protect T))))))) (shen.kl-to-lisp-h V13303 (shen.rectify-t V13304))) ((and (cons? V13304) (and (= lambda (hd V13304)) (and (cons? (tl V13304)) (and (cons? (tl (tl V13304))) (= () (tl (tl (tl V13304)))))))) (cons (protect FUNCTION) (cons (cons (protect LAMBDA) (cons (cons (hd (tl V13304)) ()) (cons (shen.kl-to-lisp-h (cons (hd (tl V13304)) V13303) (hd (tl (tl V13304)))) ()))) ()))) ((and (cons? V13304) (and (= let (hd V13304)) (and (cons? (tl V13304)) (and (cons? (tl (tl V13304))) (and (cons? (tl (tl (tl V13304)))) (and (= () (tl (tl (tl (tl V13304))))) (= (hd (tl V13304)) (protect T)))))))) (shen.kl-to-lisp-h V13303 (shen.rectify-t V13304))) ((and (cons? V13304) (and (= let (hd V13304)) (and (cons? (tl V13304)) (and (cons? (tl (tl V13304))) (and (cons? (tl (tl (tl V13304)))) (= () (tl (tl (tl (tl V13304)))))))))) (cons (protect LET) (cons (cons (cons (hd (tl V13304)) (cons (shen.kl-to-lisp-h V13303 (hd (tl (tl V13304)))) ())) ()) (cons (shen.kl-to-lisp-h (cons (hd (tl V13304)) V13303) (hd (tl (tl (tl V13304))))) ())))) ((and (cons? V13304) (and (= defun (hd V13304)) (and (cons? (tl V13304)) (and (cons? (tl (tl V13304))) (and (cons? (tl (tl (tl V13304)))) (= () (tl (tl (tl (tl V13304)))))))))) (cons (protect DEFUN) (cons (hd (tl V13304)) (cons (hd (tl (tl V13304))) (cons (shen.kl-to-lisp-h (hd (tl (tl V13304))) (hd (tl (tl (tl V13304))))) ()))))) ((and (cons? V13304) (= cond (hd V13304))) (cons (protect COND) (((protect SHEN.MAPCAR) (lambda C (shen.cond-code V13303 C))) (tl V13304)))) ((and (cons? V13304) (or (= (protect T) (((protect SHEN.MEMBER) (hd V13304)) V13303)) (cons? (hd V13304)))) (let Lisp (((protect SHEN.MAPCAR) (lambda Y (shen.kl-to-lisp-h V13303 Y))) V13304) (shen.currylisp Lisp))) ((and (cons? V13304) (shen.fastsymbol? (hd V13304))) (let LispX (((protect SHEN.MAPCAR) (lambda Y (shen.kl-to-lisp-h V13303 Y))) (tl V13304)) (let LispF (shen.maplispsym (hd V13304)) (shen.optimise-application (cons LispF LispX))))) ((or (number? V13304) (or (string? V13304) (empty? V13304))) V13304) (true (cons (protect QUOTE) (cons V13304 ())))))

(defun shen.rectify-t (V13305) ((((protect SUBST) ((protect GENSYM) "x")) (protect T)) V13305))

(defun shen.currylisp (V13306) (cond ((and (cons? V13306) (and (cons? (tl V13306)) (cons? (tl (tl V13306))))) (shen.currylisp (cons (cons (protect FUNCALL) (cons (hd V13306) (cons (hd (tl V13306)) ()))) (tl (tl V13306))))) ((and (cons? V13306) (and (cons? (tl V13306)) (= () (tl (tl V13306))))) (cons (protect FUNCALL) V13306)) ((and (cons? V13306) (= () (tl V13306))) (cons (protect FUNCALL) V13306)) (true V13306)))

(defun shen.optimise-application (V13307) (cond ((and (cons? V13307) (and (= hd (hd V13307)) (and (cons? (tl V13307)) (= () (tl (tl V13307)))))) (cons (protect CAR) (cons (shen.optimise-application (hd (tl V13307))) ()))) ((and (cons? V13307) (and (= tl (hd V13307)) (and (cons? (tl V13307)) (= () (tl (tl V13307)))))) (cons (protect CDR) (cons (shen.optimise-application (hd (tl V13307))) ()))) ((and (cons? V13307) (and (= cons (hd V13307)) (and (cons? (tl V13307)) (and (cons? (tl (tl V13307))) (= () (tl (tl (tl V13307)))))))) (cons (protect CONS) (cons (shen.optimise-application (hd (tl V13307))) (cons (shen.optimise-application (hd (tl (tl V13307)))) ())))) ((and (cons? V13307) (and (= append (hd V13307)) (and (cons? (tl V13307)) (and (cons? (tl (tl V13307))) (= () (tl (tl (tl V13307)))))))) (cons (protect APPEND) (cons (shen.optimise-application (hd (tl V13307))) (cons (shen.optimise-application (hd (tl (tl V13307)))) ())))) ((and (cons? V13307) (and (= reverse (hd V13307)) (and (cons? (tl V13307)) (= () (tl (tl V13307)))))) (cons (protect REVERSE) (cons (shen.optimise-application (hd (tl V13307))) ()))) ((and (cons? V13307) (and (= length (hd V13307)) (and (cons? (tl V13307)) (= () (tl (tl V13307)))))) (cons (protect SHEN.LIST-LENGTH) (cons (shen.optimise-application (hd (tl V13307))) ()))) ((and (cons? V13307) (and (= if (hd V13307)) (and (cons? (tl V13307)) (and (cons? (tl (tl V13307))) (and (cons? (tl (tl (tl V13307)))) (= () (tl (tl (tl (tl V13307)))))))))) (cons (protect IF) (cons (shen.wrap (hd (tl V13307))) (cons (shen.optimise-application (hd (tl (tl V13307)))) (cons (shen.optimise-application (hd (tl (tl (tl V13307))))) ()))))) ((and (cons? V13307) (and (= value (hd V13307)) (and (cons? (tl V13307)) (and (cons? (hd (tl V13307))) (and (cons? (tl (hd (tl V13307)))) (and (= () (tl (tl (hd (tl V13307))))) (and (= () (tl (tl V13307))) (= (hd (hd (tl V13307))) (protect QUOTE))))))))) (hd (tl (hd (tl V13307))))) ((and (cons? V13307) (and (= map (hd V13307)) (and (cons? (tl V13307)) (and (cons? (tl (tl V13307))) (= () (tl (tl (tl V13307)))))))) (cons (protect SHEN.MAPCAR) (tl V13307))) ((and (cons? V13307) (and (= + (hd V13307)) (and (cons? (tl V13307)) (and (= 1 (hd (tl V13307))) (and (cons? (tl (tl V13307))) (= () (tl (tl (tl V13307))))))))) (cons (intern "1+") (cons (shen.optimise-application (hd (tl (tl V13307)))) ()))) ((and (cons? V13307) (and (= + (hd V13307)) (and (cons? (tl V13307)) (and (cons? (tl (tl V13307))) (and (= 1 (hd (tl (tl V13307)))) (= () (tl (tl (tl V13307))))))))) (cons (intern "1+") (cons (shen.optimise-application (hd (tl V13307))) ()))) ((and (cons? V13307) (and (= - (hd V13307)) (and (cons? (tl V13307)) (and (cons? (tl (tl V13307))) (and (= 1 (hd (tl (tl V13307)))) (= () (tl (tl (tl V13307))))))))) (cons (intern "1-") (cons (shen.optimise-application (hd (tl V13307))) ()))) ((cons? V13307) (((protect SHEN.MAPCAR) (lambda Z (shen.optimise-application Z))) V13307)) (true V13307)))

(defun shen.cond-code (V13312 V13313) (cond ((and (cons? V13313) (and (cons? (tl V13313)) (= () (tl (tl V13313))))) (let LispTest (shen.wrap (shen.kl-to-lisp-h V13312 (hd V13313))) (let LispResult (shen.kl-to-lisp-h V13312 (hd (tl V13313))) (cons LispTest (cons LispResult ()))))) (true (simple-error "implementation error in shen.cond-code"))))

(defun shen.wrap (V13314) (cond ((and (cons? V13314) (and (cons? (tl V13314)) (and (= true (hd (tl V13314))) (and (= () (tl (tl V13314))) (= (hd V13314) (protect QUOTE)))))) (protect T)) ((and (cons? V13314) (and (= cons? (hd V13314)) (and (cons? (tl V13314)) (= () (tl (tl V13314)))))) (cons (protect CONSP) (tl V13314))) ((and (cons? V13314) (and (= string? (hd V13314)) (and (cons? (tl V13314)) (= () (tl (tl V13314)))))) (cons (protect STRINGP) (tl V13314))) ((and (cons? V13314) (and (= number? (hd V13314)) (and (cons? (tl V13314)) (= () (tl (tl V13314)))))) (cons (protect NUMBERP) (tl V13314))) ((and (cons? V13314) (and (= empty? (hd V13314)) (and (cons? (tl V13314)) (= () (tl (tl V13314)))))) (cons (protect NULL) (tl V13314))) ((and (cons? V13314) (and (= and (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (= () (tl (tl (tl V13314)))))))) (cons (protect AND) (cons (shen.wrap (hd (tl V13314))) (cons (shen.wrap (hd (tl (tl V13314)))) ())))) ((and (cons? V13314) (and (= or (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (= () (tl (tl (tl V13314)))))))) (cons (protect OR) (cons (shen.wrap (hd (tl V13314))) (cons (shen.wrap (hd (tl (tl V13314)))) ())))) ((and (cons? V13314) (and (= not (hd V13314)) (and (cons? (tl V13314)) (= () (tl (tl V13314)))))) (cons (protect NOT) (cons (shen.wrap (hd (tl V13314))) ()))) ((and (cons? V13314) (and (= shen.equal? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (and (= () (hd (tl (tl V13314)))) (= () (tl (tl (tl V13314))))))))) (cons (protect NULL) (cons (hd (tl V13314)) ()))) ((and (cons? V13314) (and (= shen.equal? (hd V13314)) (and (cons? (tl V13314)) (and (= () (hd (tl V13314))) (and (cons? (tl (tl V13314))) (= () (tl (tl (tl V13314))))))))) (cons (protect NULL) (tl (tl V13314)))) ((and (cons? V13314) (and (= shen.equal? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (and (cons? (hd (tl (tl V13314)))) (and (cons? (tl (hd (tl (tl V13314))))) (and (= () (tl (tl (hd (tl (tl V13314)))))) (and (= () (tl (tl (tl V13314)))) (and (= (hd (hd (tl (tl V13314)))) (protect QUOTE)) (shen.fastsymbol? (hd (tl (hd (tl (tl V13314))))))))))))))) (cons (protect EQ) (tl V13314))) ((and (cons? V13314) (and (= shen.equal? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (hd (tl V13314))) (and (cons? (tl (hd (tl V13314)))) (and (= () (tl (tl (hd (tl V13314))))) (and (cons? (tl (tl V13314))) (and (= () (tl (tl (tl V13314)))) (and (= (hd (hd (tl V13314))) (protect QUOTE)) (shen.fastsymbol? (hd (tl (hd (tl V13314)))))))))))))) (cons (protect EQ) (tl V13314))) ((and (cons? V13314) (and (= shen.equal? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (hd (tl V13314))) (and (= fail (hd (hd (tl V13314)))) (and (= () (tl (hd (tl V13314)))) (and (cons? (tl (tl V13314))) (= () (tl (tl (tl V13314))))))))))) (cons (protect EQ) (tl V13314))) ((and (cons? V13314) (and (= shen.equal? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (and (cons? (hd (tl (tl V13314)))) (and (= fail (hd (hd (tl (tl V13314))))) (and (= () (tl (hd (tl (tl V13314))))) (= () (tl (tl (tl V13314))))))))))) (cons (protect EQ) (tl V13314))) ((and (cons? V13314) (and (= shen.equal? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (and (= () (tl (tl (tl V13314)))) (string? (hd (tl V13314)))))))) (cons (protect EQUAL) (tl V13314))) ((and (cons? V13314) (and (= shen.equal? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (and (= () (tl (tl (tl V13314)))) (string? (hd (tl (tl V13314))))))))) (cons (protect EQUAL) (tl V13314))) ((and (cons? V13314) (and (= shen.equal? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (and (= () (tl (tl (tl V13314)))) (number? (hd (tl V13314)))))))) (cons (protect SHEN.EQL) (tl V13314))) ((and (cons? V13314) (and (= shen.equal? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (and (= () (tl (tl (tl V13314)))) (number? (hd (tl (tl V13314))))))))) (cons (protect SHEN.EQL) (tl V13314))) ((and (cons? V13314) (and (= shen.equal? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (= () (tl (tl (tl V13314)))))))) (cons shen.ABSEQUAL (tl V13314))) ((and (cons? V13314) (and (= shen.greater? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (= () (tl (tl (tl V13314)))))))) (cons > (tl V13314))) ((and (cons? V13314) (and (= shen.greater-than-or-equal-to? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (= () (tl (tl (tl V13314)))))))) (cons >= (tl V13314))) ((and (cons? V13314) (and (= shen.less? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (= () (tl (tl (tl V13314)))))))) (cons < (tl V13314))) ((and (cons? V13314) (and (= shen.less-than-or-equal-to? (hd V13314)) (and (cons? (tl V13314)) (and (cons? (tl (tl V13314))) (= () (tl (tl (tl V13314)))))))) (cons <= (tl V13314))) (true (cons shen.wrapper (cons V13314 ())))))

(defun shen.fastsymbol? (V13321) (cond ((cons? V13321) false) ((= () V13321) false) ((string? V13321) false) ((number? V13321) false) (true true)))

(defun shen.wrapper (V13322) (cond ((= true V13322) (protect T)) ((= false V13322) ()) (true (simple-error "boolean expected"))))

(defun shen.maplispsym (V13323) (cond ((= = V13323) shen.equal?) ((= > V13323) shen.greater?) ((= < V13323) shen.less?) ((= >= V13323) shen.greater-than-or-equal-to?) ((= <= V13323) shen.less-than-or-equal-to?) ((= + V13323) shen.add) ((= - V13323) shen.subtract) ((= / V13323) shen.divide) ((= * V13323) shen.multiply) (true V13323)))

