(defun cl.kl-to-lisp (V4835) (cl.kl-to-lisp-h () V4835))

(defun cl.kl-to-lisp-h (V4843 V4844) (cond ((= T (MEMBER V4844 V4843)) V4844) ((and (cons? V4844) (and (= type (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (= () (tl (tl (tl V4844)))))))) (cl.kl-to-lisp-h V4843 (hd (tl V4844)))) ((and (cons? V4844) (and (= protect (hd V4844)) (and (cons? (tl V4844)) (= () (tl (tl V4844)))))) (cl.kl-to-lisp-h V4843 (hd (tl V4844)))) ((and (cons? V4844) (and (= lambda (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (and (= () (tl (tl (tl V4844)))) (= (hd (tl V4844)) T)))))) (cl.kl-to-lisp-h V4843 (cl.rectify-t V4844))) ((and (cons? V4844) (and (= lambda (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (= () (tl (tl (tl V4844)))))))) (cons FUNCTION (cons (cons LAMBDA (cons (cons (hd (tl V4844)) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V4844)) V4843) (hd (tl (tl V4844)))) ()))) ()))) ((and (cons? V4844) (and (= let (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (and (cons? (tl (tl (tl V4844)))) (and (= () (tl (tl (tl (tl V4844))))) (= (hd (tl V4844)) T))))))) (cl.kl-to-lisp-h V4843 (cl.rectify-t V4844))) ((and (cons? V4844) (and (= let (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (and (cons? (tl (tl (tl V4844)))) (= () (tl (tl (tl (tl V4844)))))))))) (cons LET (cons (cons (cons (hd (tl V4844)) (cons (cl.kl-to-lisp-h V4843 (hd (tl (tl V4844)))) ())) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V4844)) V4843) (hd (tl (tl (tl V4844))))) ())))) ((and (cons? V4844) (and (= defun (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (and (cons? (tl (tl (tl V4844)))) (= () (tl (tl (tl (tl V4844)))))))))) (cons DEFUN (cons (hd (tl V4844)) (cons (hd (tl (tl V4844))) (cons (cl.kl-to-lisp-h (hd (tl (tl V4844))) (hd (tl (tl (tl V4844))))) ()))))) ((and (cons? V4844) (= cond (hd V4844))) (cons COND (CL.MAPCAR (lambda C (cl.cond-code V4843 C)) (tl V4844)))) ((and (cons? V4844) (or (= T (MEMBER (hd V4844) V4843)) (cons? (hd V4844)))) (let Lisp (CL.MAPCAR (lambda Y (cl.kl-to-lisp-h V4843 Y)) V4844) (cl.currylisp Lisp))) ((and (cons? V4844) (cl.fastsymbol? (hd V4844))) (let LispX (CL.MAPCAR (lambda Y (cl.kl-to-lisp-h V4843 Y)) (tl V4844)) (let LispF (cl.maplispsym (hd V4844)) (cl.optimise-application (cons LispF LispX))))) ((or (number? V4844) (or (string? V4844) (empty? V4844))) V4844) (true (cons QUOTE (cons V4844 ())))))

(defun cl.rectify-t (V4845) (SUBST (GENSYM "x") T V4845))

(defun cl.currylisp (V4846) (cond ((and (cons? V4846) (and (cons? (tl V4846)) (cons? (tl (tl V4846))))) (cl.currylisp (cons (cons FUNCALL (cons (hd V4846) (cons (hd (tl V4846)) ()))) (tl (tl V4846))))) ((and (cons? V4846) (and (cons? (tl V4846)) (= () (tl (tl V4846))))) (cons FUNCALL V4846)) ((and (cons? V4846) (= () (tl V4846))) (cons FUNCALL V4846)) (true V4846)))

(defun cl.optimise-application (V4847) (cond ((and (cons? V4847) (and (= protect (hd V4847)) (and (cons? (tl V4847)) (= () (tl (tl V4847)))))) (cl.optimise-application (hd (tl V4847)))) ((and (cons? V4847) (and (= hd (hd V4847)) (and (cons? (tl V4847)) (= () (tl (tl V4847)))))) (cons CAR (cons (cl.optimise-application (hd (tl V4847))) ()))) ((and (cons? V4847) (and (= tl (hd V4847)) (and (cons? (tl V4847)) (= () (tl (tl V4847)))))) (cons CDR (cons (cl.optimise-application (hd (tl V4847))) ()))) ((and (cons? V4847) (and (= cons (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (= () (tl (tl (tl V4847)))))))) (cons CONS (cons (cl.optimise-application (hd (tl V4847))) (cons (cl.optimise-application (hd (tl (tl V4847)))) ())))) ((and (cons? V4847) (and (= append (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (= () (tl (tl (tl V4847)))))))) (cons APPEND (cons (cl.optimise-application (hd (tl V4847))) (cons (cl.optimise-application (hd (tl (tl V4847)))) ())))) ((and (cons? V4847) (and (= reverse (hd V4847)) (and (cons? (tl V4847)) (= () (tl (tl V4847)))))) (cons REVERSE (cons (cl.optimise-application (hd (tl V4847))) ()))) ((and (cons? V4847) (and (= length (hd V4847)) (and (cons? (tl V4847)) (= () (tl (tl V4847)))))) (cons CL.LIST-LENGTH (cons (cl.optimise-application (hd (tl V4847))) ()))) ((and (cons? V4847) (and (= if (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (and (cons? (tl (tl (tl V4847)))) (= () (tl (tl (tl (tl V4847)))))))))) (cons IF (cons (cl.wrap (hd (tl V4847))) (cons (cl.optimise-application (hd (tl (tl V4847)))) (cons (cl.optimise-application (hd (tl (tl (tl V4847))))) ()))))) ((and (cons? V4847) (and (= value (hd V4847)) (and (cons? (tl V4847)) (and (cons? (hd (tl V4847))) (and (cons? (tl (hd (tl V4847)))) (and (= () (tl (tl (hd (tl V4847))))) (and (= () (tl (tl V4847))) (= (hd (hd (tl V4847))) QUOTE)))))))) (hd (tl (hd (tl V4847))))) ((and (cons? V4847) (and (= map (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (= () (tl (tl (tl V4847)))))))) (cons CL.MAPCAR (tl V4847))) ((and (cons? V4847) (and (= + (hd V4847)) (and (cons? (tl V4847)) (and (= 1 (hd (tl V4847))) (and (cons? (tl (tl V4847))) (= () (tl (tl (tl V4847))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl (tl V4847)))) ()))) ((and (cons? V4847) (and (= + (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (and (= 1 (hd (tl (tl V4847)))) (= () (tl (tl (tl V4847))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl V4847))) ()))) ((and (cons? V4847) (and (= - (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (and (= 1 (hd (tl (tl V4847)))) (= () (tl (tl (tl V4847))))))))) (cons (intern "1-") (cons (cl.optimise-application (hd (tl V4847))) ()))) ((cons? V4847) (CL.MAPCAR (lambda Z (cl.optimise-application Z)) V4847)) (true V4847)))

(defun cl.cond-code (V4852 V4853) (cond ((and (cons? V4853) (and (cons? (tl V4853)) (= () (tl (tl V4853))))) (let LispTest (cl.wrap (cl.kl-to-lisp-h V4852 (hd V4853))) (let LispResult (cl.kl-to-lisp-h V4852 (hd (tl V4853))) (cons LispTest (cons LispResult ()))))) (true (simple-error "implementation error in shen.cond-code"))))

(defun cl.wrap (V4854) (cond ((and (cons? V4854) (and (cons? (tl V4854)) (and (= true (hd (tl V4854))) (and (= () (tl (tl V4854))) (= (hd V4854) QUOTE))))) T) ((and (cons? V4854) (and (= cons? (hd V4854)) (and (cons? (tl V4854)) (= () (tl (tl V4854)))))) (cons CONSP (tl V4854))) ((and (cons? V4854) (and (= string? (hd V4854)) (and (cons? (tl V4854)) (= () (tl (tl V4854)))))) (cons STRINGP (tl V4854))) ((and (cons? V4854) (and (= number? (hd V4854)) (and (cons? (tl V4854)) (= () (tl (tl V4854)))))) (cons NUMBERP (tl V4854))) ((and (cons? V4854) (and (= empty? (hd V4854)) (and (cons? (tl V4854)) (= () (tl (tl V4854)))))) (cons NULL (tl V4854))) ((and (cons? V4854) (and (= and (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons AND (cons (cl.wrap (hd (tl V4854))) (cons (cl.wrap (hd (tl (tl V4854)))) ())))) ((and (cons? V4854) (and (= or (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons OR (cons (cl.wrap (hd (tl V4854))) (cons (cl.wrap (hd (tl (tl V4854)))) ())))) ((and (cons? V4854) (and (= not (hd V4854)) (and (cons? (tl V4854)) (= () (tl (tl V4854)))))) (cons NOT (cons (cl.wrap (hd (tl V4854))) ()))) ((and (cons? V4854) (and (= cl.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (= () (hd (tl (tl V4854)))) (= () (tl (tl (tl V4854))))))))) (cons NULL (cons (hd (tl V4854)) ()))) ((and (cons? V4854) (and (= cl.equal? (hd V4854)) (and (cons? (tl V4854)) (and (= () (hd (tl V4854))) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854))))))))) (cons NULL (tl (tl V4854)))) ((and (cons? V4854) (and (= cl.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (cons? (hd (tl (tl V4854)))) (and (cons? (tl (hd (tl (tl V4854))))) (and (= () (tl (tl (hd (tl (tl V4854)))))) (and (= () (tl (tl (tl V4854)))) (and (= (hd (hd (tl (tl V4854)))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl (tl V4854))))))))))))))) (cons EQ (tl V4854))) ((and (cons? V4854) (and (= cl.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (hd (tl V4854))) (and (cons? (tl (hd (tl V4854)))) (and (= () (tl (tl (hd (tl V4854))))) (and (cons? (tl (tl V4854))) (and (= () (tl (tl (tl V4854)))) (and (= (hd (hd (tl V4854))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl V4854)))))))))))))) (cons EQ (tl V4854))) ((and (cons? V4854) (and (= cl.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (hd (tl V4854))) (and (= fail (hd (hd (tl V4854)))) (and (= () (tl (hd (tl V4854)))) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854))))))))))) (cons EQ (tl V4854))) ((and (cons? V4854) (and (= cl.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (cons? (hd (tl (tl V4854)))) (and (= fail (hd (hd (tl (tl V4854))))) (and (= () (tl (hd (tl (tl V4854))))) (= () (tl (tl (tl V4854))))))))))) (cons EQ (tl V4854))) ((and (cons? V4854) (and (= cl.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (= () (tl (tl (tl V4854)))) (string? (hd (tl V4854)))))))) (cons EQUAL (tl V4854))) ((and (cons? V4854) (and (= cl.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (= () (tl (tl (tl V4854)))) (string? (hd (tl (tl V4854))))))))) (cons EQUAL (tl V4854))) ((and (cons? V4854) (and (= cl.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (= () (tl (tl (tl V4854)))) (number? (hd (tl V4854)))))))) (cons EQL (tl V4854))) ((and (cons? V4854) (and (= cl.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (= () (tl (tl (tl V4854)))) (number? (hd (tl (tl V4854))))))))) (cons EQL (tl V4854))) ((and (cons? V4854) (and (= cl.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons shen.ABSEQUAL (tl V4854))) ((and (cons? V4854) (and (= cl.greater? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons > (tl V4854))) ((and (cons? V4854) (and (= cl.greater-than-or-equal-to? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons >= (tl V4854))) ((and (cons? V4854) (and (= cl.less? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons < (tl V4854))) ((and (cons? V4854) (and (= cl.less-than-or-equal-to? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons <= (tl V4854))) (true (cons cl.wrapper (cons V4854 ())))))

(defun cl.fastsymbol? (V4861) (cond ((cons? V4861) false) ((= () V4861) false) ((string? V4861) false) ((number? V4861) false) (true true)))

(defun cl.wrapper (V4862) (cond ((= true V4862) T) ((= false V4862) ()) (true (simple-error "boolean expected"))))

(defun cl.maplispsym (V4863) (cond ((= = V4863) cl.equal?) ((= > V4863) cl.greater?) ((= < V4863) cl.less?) ((= >= V4863) cl.greater-than-or-equal-to?) ((= <= V4863) cl.less-than-or-equal-to?) ((= + V4863) cl.add) ((= - V4863) cl.subtract) ((= / V4863) cl.divide) ((= * V4863) cl.multiply) (true V4863)))

