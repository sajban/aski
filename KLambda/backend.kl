(defun shen.kl-to-lisp (V4835) (shen.kl-to-lisp-h () V4835))

(defun shen.kl-to-lisp-h (V4843 V4844) (cond ((= (protect T) (((protect SHEN.MEMBER) V4844) V4843)) V4844) ((and (cons? V4844) (and (= type (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (= () (tl (tl (tl V4844)))))))) (shen.kl-to-lisp-h V4843 (hd (tl V4844)))) ((and (cons? V4844) (and (= protect (hd V4844)) (and (cons? (tl V4844)) (= () (tl (tl V4844)))))) (shen.kl-to-lisp-h V4843 (hd (tl V4844)))) ((and (cons? V4844) (and (= lambda (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (and (= () (tl (tl (tl V4844)))) (= (hd (tl V4844)) (protect T))))))) (shen.kl-to-lisp-h V4843 (shen.rectify-t V4844))) ((and (cons? V4844) (and (= lambda (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (= () (tl (tl (tl V4844)))))))) (cons (protect FUNCTION) (cons (cons (protect LAMBDA) (cons (cons (hd (tl V4844)) ()) (cons (shen.kl-to-lisp-h (cons (hd (tl V4844)) V4843) (hd (tl (tl V4844)))) ()))) ()))) ((and (cons? V4844) (and (= let (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (and (cons? (tl (tl (tl V4844)))) (and (= () (tl (tl (tl (tl V4844))))) (= (hd (tl V4844)) (protect T)))))))) (shen.kl-to-lisp-h V4843 (shen.rectify-t V4844))) ((and (cons? V4844) (and (= let (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (and (cons? (tl (tl (tl V4844)))) (= () (tl (tl (tl (tl V4844)))))))))) (cons (protect LET) (cons (cons (cons (hd (tl V4844)) (cons (shen.kl-to-lisp-h V4843 (hd (tl (tl V4844)))) ())) ()) (cons (shen.kl-to-lisp-h (cons (hd (tl V4844)) V4843) (hd (tl (tl (tl V4844))))) ())))) ((and (cons? V4844) (and (= defun (hd V4844)) (and (cons? (tl V4844)) (and (cons? (tl (tl V4844))) (and (cons? (tl (tl (tl V4844)))) (= () (tl (tl (tl (tl V4844)))))))))) (cons (protect DEFUN) (cons (hd (tl V4844)) (cons (hd (tl (tl V4844))) (cons (shen.kl-to-lisp-h (hd (tl (tl V4844))) (hd (tl (tl (tl V4844))))) ()))))) ((and (cons? V4844) (= cond (hd V4844))) (cons (protect COND) (((protect SHEN.MAPCAR) (lambda C (shen.cond-code V4843 C))) (tl V4844)))) ((and (cons? V4844) (or (= (protect T) (((protect SHEN.MEMBER) (hd V4844)) V4843)) (cons? (hd V4844)))) (let Lisp (((protect SHEN.MAPCAR) (lambda Y (shen.kl-to-lisp-h V4843 Y))) V4844) (shen.currylisp Lisp))) ((and (cons? V4844) (shen.fastsymbol? (hd V4844))) (let LispX (((protect SHEN.MAPCAR) (lambda Y (shen.kl-to-lisp-h V4843 Y))) (tl V4844)) (let LispF (shen.maplispsym (hd V4844)) (shen.optimise-application (cons LispF LispX))))) ((or (number? V4844) (or (string? V4844) (empty? V4844))) V4844) (true (cons (protect QUOTE) (cons V4844 ())))))

(defun shen.rectify-t (V4845) ((((protect SUBST) ((protect GENSYM) "x")) (protect T)) V4845))

(defun shen.currylisp (V4846) (cond ((and (cons? V4846) (and (cons? (tl V4846)) (cons? (tl (tl V4846))))) (shen.currylisp (cons (cons (protect FUNCALL) (cons (hd V4846) (cons (hd (tl V4846)) ()))) (tl (tl V4846))))) ((and (cons? V4846) (and (cons? (tl V4846)) (= () (tl (tl V4846))))) (cons (protect FUNCALL) V4846)) ((and (cons? V4846) (= () (tl V4846))) (cons (protect FUNCALL) V4846)) (true V4846)))

(defun shen.optimise-application (V4847) (cond ((and (cons? V4847) (and (= hd (hd V4847)) (and (cons? (tl V4847)) (= () (tl (tl V4847)))))) (cons (protect CAR) (cons (shen.optimise-application (hd (tl V4847))) ()))) ((and (cons? V4847) (and (= tl (hd V4847)) (and (cons? (tl V4847)) (= () (tl (tl V4847)))))) (cons (protect CDR) (cons (shen.optimise-application (hd (tl V4847))) ()))) ((and (cons? V4847) (and (= cons (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (= () (tl (tl (tl V4847)))))))) (cons (protect CONS) (cons (shen.optimise-application (hd (tl V4847))) (cons (shen.optimise-application (hd (tl (tl V4847)))) ())))) ((and (cons? V4847) (and (= append (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (= () (tl (tl (tl V4847)))))))) (cons (protect APPEND) (cons (shen.optimise-application (hd (tl V4847))) (cons (shen.optimise-application (hd (tl (tl V4847)))) ())))) ((and (cons? V4847) (and (= reverse (hd V4847)) (and (cons? (tl V4847)) (= () (tl (tl V4847)))))) (cons (protect REVERSE) (cons (shen.optimise-application (hd (tl V4847))) ()))) ((and (cons? V4847) (and (= length (hd V4847)) (and (cons? (tl V4847)) (= () (tl (tl V4847)))))) (cons (protect SHEN.LIST-LENGTH) (cons (shen.optimise-application (hd (tl V4847))) ()))) ((and (cons? V4847) (and (= if (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (and (cons? (tl (tl (tl V4847)))) (= () (tl (tl (tl (tl V4847)))))))))) (cons (protect IF) (cons (shen.wrap (hd (tl V4847))) (cons (shen.optimise-application (hd (tl (tl V4847)))) (cons (shen.optimise-application (hd (tl (tl (tl V4847))))) ()))))) ((and (cons? V4847) (and (= value (hd V4847)) (and (cons? (tl V4847)) (and (cons? (hd (tl V4847))) (and (cons? (tl (hd (tl V4847)))) (and (= () (tl (tl (hd (tl V4847))))) (and (= () (tl (tl V4847))) (= (hd (hd (tl V4847))) (protect QUOTE))))))))) (hd (tl (hd (tl V4847))))) ((and (cons? V4847) (and (= map (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (= () (tl (tl (tl V4847)))))))) (cons (protect SHEN.MAPCAR) (tl V4847))) ((and (cons? V4847) (and (= + (hd V4847)) (and (cons? (tl V4847)) (and (= 1 (hd (tl V4847))) (and (cons? (tl (tl V4847))) (= () (tl (tl (tl V4847))))))))) (cons (intern "1+") (cons (shen.optimise-application (hd (tl (tl V4847)))) ()))) ((and (cons? V4847) (and (= + (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (and (= 1 (hd (tl (tl V4847)))) (= () (tl (tl (tl V4847))))))))) (cons (intern "1+") (cons (shen.optimise-application (hd (tl V4847))) ()))) ((and (cons? V4847) (and (= - (hd V4847)) (and (cons? (tl V4847)) (and (cons? (tl (tl V4847))) (and (= 1 (hd (tl (tl V4847)))) (= () (tl (tl (tl V4847))))))))) (cons (intern "1-") (cons (shen.optimise-application (hd (tl V4847))) ()))) ((cons? V4847) (((protect SHEN.MAPCAR) (lambda Z (shen.optimise-application Z))) V4847)) (true V4847)))

(defun shen.cond-code (V4852 V4853) (cond ((and (cons? V4853) (and (cons? (tl V4853)) (= () (tl (tl V4853))))) (let LispTest (shen.wrap (shen.kl-to-lisp-h V4852 (hd V4853))) (let LispResult (shen.kl-to-lisp-h V4852 (hd (tl V4853))) (cons LispTest (cons LispResult ()))))) (true (simple-error "implementation error in shen.cond-code"))))

(defun shen.wrap (V4854) (cond ((and (cons? V4854) (and (cons? (tl V4854)) (and (= true (hd (tl V4854))) (and (= () (tl (tl V4854))) (= (hd V4854) (protect QUOTE)))))) (protect T)) ((and (cons? V4854) (and (= cons? (hd V4854)) (and (cons? (tl V4854)) (= () (tl (tl V4854)))))) (cons (protect CONSP) (tl V4854))) ((and (cons? V4854) (and (= string? (hd V4854)) (and (cons? (tl V4854)) (= () (tl (tl V4854)))))) (cons (protect STRINGP) (tl V4854))) ((and (cons? V4854) (and (= number? (hd V4854)) (and (cons? (tl V4854)) (= () (tl (tl V4854)))))) (cons (protect NUMBERP) (tl V4854))) ((and (cons? V4854) (and (= empty? (hd V4854)) (and (cons? (tl V4854)) (= () (tl (tl V4854)))))) (cons (protect NULL) (tl V4854))) ((and (cons? V4854) (and (= and (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons (protect AND) (cons (shen.wrap (hd (tl V4854))) (cons (shen.wrap (hd (tl (tl V4854)))) ())))) ((and (cons? V4854) (and (= or (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons (protect OR) (cons (shen.wrap (hd (tl V4854))) (cons (shen.wrap (hd (tl (tl V4854)))) ())))) ((and (cons? V4854) (and (= not (hd V4854)) (and (cons? (tl V4854)) (= () (tl (tl V4854)))))) (cons (protect NOT) (cons (shen.wrap (hd (tl V4854))) ()))) ((and (cons? V4854) (and (= shen.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (= () (hd (tl (tl V4854)))) (= () (tl (tl (tl V4854))))))))) (cons (protect NULL) (cons (hd (tl V4854)) ()))) ((and (cons? V4854) (and (= shen.equal? (hd V4854)) (and (cons? (tl V4854)) (and (= () (hd (tl V4854))) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854))))))))) (cons (protect NULL) (tl (tl V4854)))) ((and (cons? V4854) (and (= shen.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (cons? (hd (tl (tl V4854)))) (and (cons? (tl (hd (tl (tl V4854))))) (and (= () (tl (tl (hd (tl (tl V4854)))))) (and (= () (tl (tl (tl V4854)))) (and (= (hd (hd (tl (tl V4854)))) (protect QUOTE)) (shen.fastsymbol? (hd (tl (hd (tl (tl V4854))))))))))))))) (cons (protect EQ) (tl V4854))) ((and (cons? V4854) (and (= shen.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (hd (tl V4854))) (and (cons? (tl (hd (tl V4854)))) (and (= () (tl (tl (hd (tl V4854))))) (and (cons? (tl (tl V4854))) (and (= () (tl (tl (tl V4854)))) (and (= (hd (hd (tl V4854))) (protect QUOTE)) (shen.fastsymbol? (hd (tl (hd (tl V4854)))))))))))))) (cons (protect EQ) (tl V4854))) ((and (cons? V4854) (and (= shen.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (hd (tl V4854))) (and (= fail (hd (hd (tl V4854)))) (and (= () (tl (hd (tl V4854)))) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854))))))))))) (cons (protect EQ) (tl V4854))) ((and (cons? V4854) (and (= shen.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (cons? (hd (tl (tl V4854)))) (and (= fail (hd (hd (tl (tl V4854))))) (and (= () (tl (hd (tl (tl V4854))))) (= () (tl (tl (tl V4854))))))))))) (cons (protect EQ) (tl V4854))) ((and (cons? V4854) (and (= shen.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (= () (tl (tl (tl V4854)))) (string? (hd (tl V4854)))))))) (cons (protect EQUAL) (tl V4854))) ((and (cons? V4854) (and (= shen.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (= () (tl (tl (tl V4854)))) (string? (hd (tl (tl V4854))))))))) (cons (protect EQUAL) (tl V4854))) ((and (cons? V4854) (and (= shen.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (= () (tl (tl (tl V4854)))) (number? (hd (tl V4854)))))))) (cons (protect EQL) (tl V4854))) ((and (cons? V4854) (and (= shen.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (and (= () (tl (tl (tl V4854)))) (number? (hd (tl (tl V4854))))))))) (cons (protect EQL) (tl V4854))) ((and (cons? V4854) (and (= shen.equal? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons shen.ABSEQUAL (tl V4854))) ((and (cons? V4854) (and (= shen.greater? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons > (tl V4854))) ((and (cons? V4854) (and (= shen.greater-than-or-equal-to? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons >= (tl V4854))) ((and (cons? V4854) (and (= shen.less? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons < (tl V4854))) ((and (cons? V4854) (and (= shen.less-than-or-equal-to? (hd V4854)) (and (cons? (tl V4854)) (and (cons? (tl (tl V4854))) (= () (tl (tl (tl V4854)))))))) (cons <= (tl V4854))) (true (cons shen.wrapper (cons V4854 ())))))

(defun shen.fastsymbol? (V4861) (cond ((cons? V4861) false) ((= () V4861) false) ((string? V4861) false) ((number? V4861) false) (true true)))

(defun shen.wrapper (V4862) (cond ((= true V4862) (protect T)) ((= false V4862) ()) (true (simple-error "boolean expected"))))

(defun shen.maplispsym (V4863) (cond ((= = V4863) shen.equal?) ((= > V4863) shen.greater?) ((= < V4863) shen.less?) ((= >= V4863) shen.greater-than-or-equal-to?) ((= <= V4863) shen.less-than-or-equal-to?) ((= + V4863) shen.add) ((= - V4863) shen.subtract) ((= / V4863) shen.divide) ((= * V4863) shen.multiply) (true V4863)))

