(defun cl.kl-to-lisp (V9922) (cl.kl-to-lisp-h () V9922))

(defun cl.kl-to-lisp-h (V9930 V9931) (cond ((= T (MEMBER V9931 V9930)) V9931) ((and (cons? V9931) (and (= type (hd V9931)) (and (cons? (tl V9931)) (and (cons? (tl (tl V9931))) (= () (tl (tl (tl V9931)))))))) (cl.kl-to-lisp-h V9930 (hd (tl V9931)))) ((and (cons? V9931) (and (= protect (hd V9931)) (and (cons? (tl V9931)) (= () (tl (tl V9931)))))) (cl.kl-to-lisp-h V9930 (hd (tl V9931)))) ((and (cons? V9931) (and (= lambda (hd V9931)) (and (cons? (tl V9931)) (and (cons? (tl (tl V9931))) (and (= () (tl (tl (tl V9931)))) (= (hd (tl V9931)) T)))))) (cl.kl-to-lisp-h V9930 (cl.rectify-t V9931))) ((and (cons? V9931) (and (= lambda (hd V9931)) (and (cons? (tl V9931)) (and (cons? (tl (tl V9931))) (= () (tl (tl (tl V9931)))))))) (cons FUNCTION (cons (cons LAMBDA (cons (cons (hd (tl V9931)) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V9931)) V9930) (hd (tl (tl V9931)))) ()))) ()))) ((and (cons? V9931) (and (= let (hd V9931)) (and (cons? (tl V9931)) (and (cons? (tl (tl V9931))) (and (cons? (tl (tl (tl V9931)))) (and (= () (tl (tl (tl (tl V9931))))) (= (hd (tl V9931)) T))))))) (cl.kl-to-lisp-h V9930 (cl.rectify-t V9931))) ((and (cons? V9931) (and (= let (hd V9931)) (and (cons? (tl V9931)) (and (cons? (tl (tl V9931))) (and (cons? (tl (tl (tl V9931)))) (= () (tl (tl (tl (tl V9931)))))))))) (cons LET (cons (cons (cons (hd (tl V9931)) (cons (cl.kl-to-lisp-h V9930 (hd (tl (tl V9931)))) ())) ()) (cons (cl.kl-to-lisp-h (cons (hd (tl V9931)) V9930) (hd (tl (tl (tl V9931))))) ())))) ((and (cons? V9931) (and (= defun (hd V9931)) (and (cons? (tl V9931)) (and (cons? (tl (tl V9931))) (and (cons? (tl (tl (tl V9931)))) (= () (tl (tl (tl (tl V9931)))))))))) (cons DEFUN (cons (hd (tl V9931)) (cons (hd (tl (tl V9931))) (cons (cl.kl-to-lisp-h (hd (tl (tl V9931))) (hd (tl (tl (tl V9931))))) ()))))) ((and (cons? V9931) (= cond (hd V9931))) (cons COND (CL.MAPCAR (lambda C (cl.cond-code V9930 C)) (tl V9931)))) ((and (cons? V9931) (or (= T (MEMBER (hd V9931) V9930)) (cons? (hd V9931)))) (let Lisp (CL.MAPCAR (lambda Y (cl.kl-to-lisp-h V9930 Y)) V9931) (cl.currylisp Lisp))) ((and (cons? V9931) (cl.fastsymbol? (hd V9931))) (let LispX (CL.MAPCAR (lambda Y (cl.kl-to-lisp-h V9930 Y)) (tl V9931)) (let LispF (cl.maplispsym (hd V9931)) (cl.optimise-application (cons LispF LispX))))) ((or (number? V9931) (or (string? V9931) (empty? V9931))) V9931) (true (cons QUOTE (cons V9931 ())))))

(defun cl.rectify-t (V9932) (SUBST (GENSYM "x") T V9932))

(defun cl.currylisp (V9933) (cond ((and (cons? V9933) (and (cons? (tl V9933)) (cons? (tl (tl V9933))))) (cl.currylisp (cons (cons FUNCALL (cons (hd V9933) (cons (hd (tl V9933)) ()))) (tl (tl V9933))))) ((and (cons? V9933) (and (cons? (tl V9933)) (= () (tl (tl V9933))))) (cons FUNCALL V9933)) ((and (cons? V9933) (= () (tl V9933))) (cons FUNCALL V9933)) (true V9933)))

(defun cl.optimise-application (V9934) (cond ((and (cons? V9934) (and (= protect (hd V9934)) (and (cons? (tl V9934)) (= () (tl (tl V9934)))))) (cl.optimise-application (hd (tl V9934)))) ((and (cons? V9934) (and (= hd (hd V9934)) (and (cons? (tl V9934)) (= () (tl (tl V9934)))))) (cons CAR (cons (cl.optimise-application (hd (tl V9934))) ()))) ((and (cons? V9934) (and (= tl (hd V9934)) (and (cons? (tl V9934)) (= () (tl (tl V9934)))))) (cons CDR (cons (cl.optimise-application (hd (tl V9934))) ()))) ((and (cons? V9934) (and (= cons (hd V9934)) (and (cons? (tl V9934)) (and (cons? (tl (tl V9934))) (= () (tl (tl (tl V9934)))))))) (cons CONS (cons (cl.optimise-application (hd (tl V9934))) (cons (cl.optimise-application (hd (tl (tl V9934)))) ())))) ((and (cons? V9934) (and (= append (hd V9934)) (and (cons? (tl V9934)) (and (cons? (tl (tl V9934))) (= () (tl (tl (tl V9934)))))))) (cons APPEND (cons (cl.optimise-application (hd (tl V9934))) (cons (cl.optimise-application (hd (tl (tl V9934)))) ())))) ((and (cons? V9934) (and (= reverse (hd V9934)) (and (cons? (tl V9934)) (= () (tl (tl V9934)))))) (cons REVERSE (cons (cl.optimise-application (hd (tl V9934))) ()))) ((and (cons? V9934) (and (= length (hd V9934)) (and (cons? (tl V9934)) (= () (tl (tl V9934)))))) (cons CL.LIST-LENGTH (cons (cl.optimise-application (hd (tl V9934))) ()))) ((and (cons? V9934) (and (= if (hd V9934)) (and (cons? (tl V9934)) (and (cons? (tl (tl V9934))) (and (cons? (tl (tl (tl V9934)))) (= () (tl (tl (tl (tl V9934)))))))))) (cons IF (cons (cl.wrap (hd (tl V9934))) (cons (cl.optimise-application (hd (tl (tl V9934)))) (cons (cl.optimise-application (hd (tl (tl (tl V9934))))) ()))))) ((and (cons? V9934) (and (= value (hd V9934)) (and (cons? (tl V9934)) (and (cons? (hd (tl V9934))) (and (cons? (tl (hd (tl V9934)))) (and (= () (tl (tl (hd (tl V9934))))) (and (= () (tl (tl V9934))) (= (hd (hd (tl V9934))) QUOTE)))))))) (hd (tl (hd (tl V9934))))) ((and (cons? V9934) (and (= map (hd V9934)) (and (cons? (tl V9934)) (and (cons? (tl (tl V9934))) (= () (tl (tl (tl V9934)))))))) (cons CL.MAPCAR (tl V9934))) ((and (cons? V9934) (and (= + (hd V9934)) (and (cons? (tl V9934)) (and (= 1 (hd (tl V9934))) (and (cons? (tl (tl V9934))) (= () (tl (tl (tl V9934))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl (tl V9934)))) ()))) ((and (cons? V9934) (and (= + (hd V9934)) (and (cons? (tl V9934)) (and (cons? (tl (tl V9934))) (and (= 1 (hd (tl (tl V9934)))) (= () (tl (tl (tl V9934))))))))) (cons (intern "1+") (cons (cl.optimise-application (hd (tl V9934))) ()))) ((and (cons? V9934) (and (= - (hd V9934)) (and (cons? (tl V9934)) (and (cons? (tl (tl V9934))) (and (= 1 (hd (tl (tl V9934)))) (= () (tl (tl (tl V9934))))))))) (cons (intern "1-") (cons (cl.optimise-application (hd (tl V9934))) ()))) ((cons? V9934) (CL.MAPCAR (lambda Z (cl.optimise-application Z)) V9934)) (true V9934)))

(defun cl.cond-code (V9939 V9940) (cond ((and (cons? V9940) (and (cons? (tl V9940)) (= () (tl (tl V9940))))) (let LispTest (cl.wrap (cl.kl-to-lisp-h V9939 (hd V9940))) (let LispResult (cl.kl-to-lisp-h V9939 (hd (tl V9940))) (cons LispTest (cons LispResult ()))))) (true (simple-error "implementation error in shen.cond-code"))))

(defun cl.wrap (V9941) (cond ((and (cons? V9941) (and (cons? (tl V9941)) (and (= true (hd (tl V9941))) (and (= () (tl (tl V9941))) (= (hd V9941) QUOTE))))) T) ((and (cons? V9941) (and (= cons? (hd V9941)) (and (cons? (tl V9941)) (= () (tl (tl V9941)))))) (cons CONSP (tl V9941))) ((and (cons? V9941) (and (= string? (hd V9941)) (and (cons? (tl V9941)) (= () (tl (tl V9941)))))) (cons STRINGP (tl V9941))) ((and (cons? V9941) (and (= number? (hd V9941)) (and (cons? (tl V9941)) (= () (tl (tl V9941)))))) (cons NUMBERP (tl V9941))) ((and (cons? V9941) (and (= empty? (hd V9941)) (and (cons? (tl V9941)) (= () (tl (tl V9941)))))) (cons NULL (tl V9941))) ((and (cons? V9941) (and (= and (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (= () (tl (tl (tl V9941)))))))) (cons AND (cons (cl.wrap (hd (tl V9941))) (cons (cl.wrap (hd (tl (tl V9941)))) ())))) ((and (cons? V9941) (and (= or (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (= () (tl (tl (tl V9941)))))))) (cons OR (cons (cl.wrap (hd (tl V9941))) (cons (cl.wrap (hd (tl (tl V9941)))) ())))) ((and (cons? V9941) (and (= not (hd V9941)) (and (cons? (tl V9941)) (= () (tl (tl V9941)))))) (cons NOT (cons (cl.wrap (hd (tl V9941))) ()))) ((and (cons? V9941) (and (= cl.equal? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (and (= () (hd (tl (tl V9941)))) (= () (tl (tl (tl V9941))))))))) (cons NULL (cons (hd (tl V9941)) ()))) ((and (cons? V9941) (and (= cl.equal? (hd V9941)) (and (cons? (tl V9941)) (and (= () (hd (tl V9941))) (and (cons? (tl (tl V9941))) (= () (tl (tl (tl V9941))))))))) (cons NULL (tl (tl V9941)))) ((and (cons? V9941) (and (= cl.equal? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (and (cons? (hd (tl (tl V9941)))) (and (cons? (tl (hd (tl (tl V9941))))) (and (= () (tl (tl (hd (tl (tl V9941)))))) (and (= () (tl (tl (tl V9941)))) (and (= (hd (hd (tl (tl V9941)))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl (tl V9941))))))))))))))) (cons EQ (tl V9941))) ((and (cons? V9941) (and (= cl.equal? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (hd (tl V9941))) (and (cons? (tl (hd (tl V9941)))) (and (= () (tl (tl (hd (tl V9941))))) (and (cons? (tl (tl V9941))) (and (= () (tl (tl (tl V9941)))) (and (= (hd (hd (tl V9941))) QUOTE) (cl.fastsymbol? (hd (tl (hd (tl V9941)))))))))))))) (cons EQ (tl V9941))) ((and (cons? V9941) (and (= cl.equal? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (hd (tl V9941))) (and (= fail (hd (hd (tl V9941)))) (and (= () (tl (hd (tl V9941)))) (and (cons? (tl (tl V9941))) (= () (tl (tl (tl V9941))))))))))) (cons EQ (tl V9941))) ((and (cons? V9941) (and (= cl.equal? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (and (cons? (hd (tl (tl V9941)))) (and (= fail (hd (hd (tl (tl V9941))))) (and (= () (tl (hd (tl (tl V9941))))) (= () (tl (tl (tl V9941))))))))))) (cons EQ (tl V9941))) ((and (cons? V9941) (and (= cl.equal? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (and (= () (tl (tl (tl V9941)))) (string? (hd (tl V9941)))))))) (cons EQUAL (tl V9941))) ((and (cons? V9941) (and (= cl.equal? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (and (= () (tl (tl (tl V9941)))) (string? (hd (tl (tl V9941))))))))) (cons EQUAL (tl V9941))) ((and (cons? V9941) (and (= cl.equal? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (and (= () (tl (tl (tl V9941)))) (number? (hd (tl V9941)))))))) (cons EQL (tl V9941))) ((and (cons? V9941) (and (= cl.equal? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (and (= () (tl (tl (tl V9941)))) (number? (hd (tl (tl V9941))))))))) (cons EQL (tl V9941))) ((and (cons? V9941) (and (= cl.equal? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (= () (tl (tl (tl V9941)))))))) (cons shen.ABSEQUAL (tl V9941))) ((and (cons? V9941) (and (= cl.greater? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (= () (tl (tl (tl V9941)))))))) (cons > (tl V9941))) ((and (cons? V9941) (and (= cl.greater-than-or-equal-to? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (= () (tl (tl (tl V9941)))))))) (cons >= (tl V9941))) ((and (cons? V9941) (and (= cl.less? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (= () (tl (tl (tl V9941)))))))) (cons < (tl V9941))) ((and (cons? V9941) (and (= cl.less-than-or-equal-to? (hd V9941)) (and (cons? (tl V9941)) (and (cons? (tl (tl V9941))) (= () (tl (tl (tl V9941)))))))) (cons <= (tl V9941))) (true (cons cl.wrapper (cons V9941 ())))))

(defun cl.fastsymbol? (V9948) (cond ((cons? V9948) false) ((= () V9948) false) ((string? V9948) false) ((number? V9948) false) (true true)))

(defun cl.wrapper (V9949) (cond ((= true V9949) T) ((= false V9949) ()) (true (simple-error "boolean expected"))))

(defun cl.maplispsym (V9950) (cond ((= = V9950) cl.equal?) ((= > V9950) cl.greater?) ((= < V9950) cl.less?) ((= >= V9950) cl.greater-than-or-equal-to?) ((= <= V9950) cl.less-than-or-equal-to?) ((= + V9950) cl.add) ((= - V9950) cl.subtract) ((= / V9950) cl.divide) ((= * V9950) cl.multiply) (true V9950)))

